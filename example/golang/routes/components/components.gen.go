// Package components provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package components

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Pager defines model for Pager.
type Pager struct {
	CurrentPage int `json:"currentPage"`
	MaxPage     int `json:"maxPage"`
}

// IdPathParam defines model for IdPathParam.
type IdPathParam string

// IdQueryParam defines model for IdQueryParam.
type IdQueryParam string

// PagerPageQueryParam defines model for PagerPageQueryParam.
type PagerPageQueryParam int

// PagerSizeQueryParam defines model for PagerSizeQueryParam.
type PagerSizeQueryParam int

// SortQueryParam defines model for SortQueryParam.
type SortQueryParam []string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4STT28aPRDGv8pq9B7eqi5skpsvbY/cqFBPVSs53ll2kP9lPJsAKd+9sjelEBFyAc0z",
	"6+f3eGw/g40+xYBBMuhnSIaNR0Gu1aJbGhmWRSslBdCQjAygIBiPoIE6UMD4MBJjB1p4RAXZDuhNWSG7",
	"VL7KwhTWcDgoWHTfRuTduedDkV6ZXjNZmjVy+Tn36jBbpiQUi2npN2H098hN7BtHWUBd5CWzxktECoJr",
	"5H/IFe2vIkv/HVam/busVWS5ioksTU5oqSdringCxW1ysUPQvXEZ3wgRWc5CkKB/OX8R5LLk1+zjZ/2/",
	"yfZ3gX/4D9Trg1DgKSymlTfHrmE2u9LMsnNF6CP7uq0JVzF1mpXHMSELYZXtyIxBSvfSaBR4s32reTi9",
	"hz+OX6oz05/HmPF+g1amXGhHJtmtSr4pyOZJyl/v4lOtySdHlqpoRhki074O/js70DCIpKzncxetcUPM",
	"ou/atp1nWgcKddAxTcYmkTbWYs6g4ety0bwUhxLkb7RCuJ0kCn2suyWpw/zySBzDHLfGJ4efQuxwk5uT",
	"N6zgETlP96SdtbObMraYMJhEoOFu1s5uQdVXnEGH0bnDnwAAAP//iY/a7QQEAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
