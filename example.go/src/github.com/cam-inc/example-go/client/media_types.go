// API "example-go": Application Media Types
//
// Code generated by goagen v1.1.0-dirty, DO NOT EDIT.
//
// Command:
// $ goagen
// --design=github.com/cam-inc/example-go/design
// --out=$(GOPATH)/src/github.com/cam-inc/example-go
// --version=v1.1.0-dirty

package client

import (
	"github.com/goadesign/goa"
	"net/http"
)

// A DMC settings data (default view)
//
// Identifier: application/vnd.dmc+json; view=default
type Dmc struct {
	// Name pattern
	Name *Name `form:"name" json:"name" xml:"name"`
	// A Pages format
	Pages []*Page `form:"pages" json:"pages" xml:"pages"`
	// Pagination definition
	Pagination *Pagination `form:"pagination" json:"pagination" xml:"pagination"`
}

// Validate validates the Dmc media type instance.
func (mt *Dmc) Validate() (err error) {
	if mt.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Pages == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "pages"))
	}
	if mt.Pagination == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "pagination"))
	}
	if mt.Name != nil {
		if err2 := mt.Name.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range mt.Pages {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if mt.Pagination != nil {
		if err2 := mt.Pagination.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeDmc decodes the Dmc instance encoded in resp body.
func (c *Client) DecodeDmc(resp *http.Response) (*Dmc, error) {
	var decoded Dmc
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A Overview page data (default view)
//
// Identifier: application/vnd.overview+json; view=default
type Overview struct {
	// A Componets format
	Componets []*Component `form:"componets" json:"componets" xml:"componets"`
	// Name pattern
	Name *Name `form:"name" json:"name" xml:"name"`
}

// Validate validates the Overview media type instance.
func (mt *Overview) Validate() (err error) {
	if mt.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Componets == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "componets"))
	}
	for _, e := range mt.Componets {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if mt.Name != nil {
		if err2 := mt.Name.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeOverview decodes the Overview instance encoded in resp body.
func (c *Client) DecodeOverview(resp *http.Response) (*Overview, error) {
	var decoded Overview
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A User (default view)
//
// Identifier: application/vnd.user+json; view=default
type User struct {
	// id
	ID int `form:"id" json:"id" xml:"id"`
	// user name
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the User media type instance.
func (mt *User) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// A User (tiny view)
//
// Identifier: application/vnd.user+json; view=tiny
type UserTiny struct {
	// id
	ID int `form:"id" json:"id" xml:"id"`
	// user name
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the UserTiny media type instance.
func (mt *UserTiny) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// DecodeUser decodes the User instance encoded in resp body.
func (c *Client) DecodeUser(resp *http.Response) (*User, error) {
	var decoded User
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeUserTiny decodes the UserTiny instance encoded in resp body.
func (c *Client) DecodeUserTiny(resp *http.Response) (*UserTiny, error) {
	var decoded UserTiny
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// UserCollection is the media type for an array of User (default view)
//
// Identifier: application/vnd.user+json; type=collection; view=default
type UserCollection []*User

// Validate validates the UserCollection media type instance.
func (mt UserCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// UserCollection is the media type for an array of User (tiny view)
//
// Identifier: application/vnd.user+json; type=collection; view=tiny
type UserTinyCollection []*UserTiny

// Validate validates the UserTinyCollection media type instance.
func (mt UserTinyCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeUserCollection decodes the UserCollection instance encoded in resp body.
func (c *Client) DecodeUserCollection(resp *http.Response) (UserCollection, error) {
	var decoded UserCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeUserTinyCollection decodes the UserTinyCollection instance encoded in resp body.
func (c *Client) DecodeUserTinyCollection(resp *http.Response) (UserTinyCollection, error) {
	var decoded UserTinyCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}
