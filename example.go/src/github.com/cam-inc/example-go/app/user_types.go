// API "example-go": Application User Types
//
// Code generated by goagen v1.1.0-dirty, DO NOT EDIT.
//
// Command:
// $ goagen
// --design=github.com/cam-inc/example-go/design
// --out=$(GOPATH)/src/github.com/cam-inc/example-go
// --version=v1.1.0-dirty

package app

import (
	"github.com/goadesign/goa"
)

// A Component type
type component struct {
	// Swagger api key
	API *string `form:"api,omitempty" json:"api,omitempty" xml:"api,omitempty"`
	// Layout of display
	Display *string `form:"display,omitempty" json:"display,omitempty" xml:"display,omitempty"`
	// Title of page
	Name *name `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Swagger api.operation key
	Operation *string `form:"operation,omitempty" json:"operation,omitempty" xml:"operation,omitempty"`
	// href of component
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// Finalize sets the default values for component type instance.
func (ut *component) Finalize() {
	var defaultDisplay = "table"
	if ut.Display == nil {
		ut.Display = &defaultDisplay
	}
}

// Validate validates the component type instance.
func (ut *component) Validate() (err error) {
	if ut.API == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "api"))
	}
	if ut.Operation == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "operation"))
	}
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if ut.Display == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "display"))
	}
	if ut.Display != nil {
		if !(*ut.Display == "table" || *ut.Display == "list" || *ut.Display == "card") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.display`, *ut.Display, []interface{}{"table", "list", "card"}))
		}
	}
	if ut.Name != nil {
		if err2 := ut.Name.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates Component from component
func (ut *component) Publicize() *Component {
	var pub Component
	if ut.API != nil {
		pub.API = *ut.API
	}
	if ut.Display != nil {
		pub.Display = *ut.Display
	}
	if ut.Name != nil {
		pub.Name = ut.Name.Publicize()
	}
	if ut.Operation != nil {
		pub.Operation = *ut.Operation
	}
	if ut.URL != nil {
		pub.URL = ut.URL
	}
	return &pub
}

// A Component type
type Component struct {
	// Swagger api key
	API string `form:"api" json:"api" xml:"api"`
	// Layout of display
	Display string `form:"display" json:"display" xml:"display"`
	// Title of page
	Name *Name `form:"name" json:"name" xml:"name"`
	// Swagger api.operation key
	Operation string `form:"operation" json:"operation" xml:"operation"`
	// href of component
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// Validate validates the Component type instance.
func (ut *Component) Validate() (err error) {
	if ut.API == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "api"))
	}
	if ut.Operation == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "operation"))
	}
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if ut.Display == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "display"))
	}
	if !(ut.Display == "table" || ut.Display == "list" || ut.Display == "card") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.display`, ut.Display, []interface{}{"table", "list", "card"}))
	}
	if ut.Name != nil {
		if err2 := ut.Name.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// A Name format
type name struct {
	// Long name
	Long *string `form:"long,omitempty" json:"long,omitempty" xml:"long,omitempty"`
	// Short name
	Short *string `form:"short,omitempty" json:"short,omitempty" xml:"short,omitempty"`
}

// Validate validates the name type instance.
func (ut *name) Validate() (err error) {
	if ut.Short == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "short"))
	}
	return
}

// Publicize creates Name from name
func (ut *name) Publicize() *Name {
	var pub Name
	if ut.Long != nil {
		pub.Long = ut.Long
	}
	if ut.Short != nil {
		pub.Short = *ut.Short
	}
	return &pub
}

// A Name format
type Name struct {
	// Long name
	Long *string `form:"long,omitempty" json:"long,omitempty" xml:"long,omitempty"`
	// Short name
	Short string `form:"short" json:"short" xml:"short"`
}

// Validate validates the Name type instance.
func (ut *Name) Validate() (err error) {
	if ut.Short == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "short"))
	}
	return
}

// A page type
type page struct {
	// Swagger api key
	API *string `form:"api,omitempty" json:"api,omitempty" xml:"api,omitempty"`
	// Layout of display
	Display *string `form:"display,omitempty" json:"display,omitempty" xml:"display,omitempty"`
	// Displayed in the drawer
	Drawer *bool `form:"drawer,omitempty" json:"drawer,omitempty" xml:"drawer,omitempty"`
	// Title of page
	Name *name `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Swagger api.operation key
	Operation *string `form:"operation,omitempty" json:"operation,omitempty" xml:"operation,omitempty"`
	// recode primary key
	Primary *string `form:"primary,omitempty" json:"primary,omitempty" xml:"primary,omitempty"`
	// Search of page
	Search []*search `form:"search,omitempty" json:"search,omitempty" xml:"search,omitempty"`
}

// Finalize sets the default values for page type instance.
func (ut *page) Finalize() {
	var defaultDisplay = "table"
	if ut.Display == nil {
		ut.Display = &defaultDisplay
	}
	for _, e := range ut.Search {
		var defaultField = "default"
		if e.Field == nil {
			e.Field = &defaultField
		}
	}
}

// Validate validates the page type instance.
func (ut *page) Validate() (err error) {
	if ut.API == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "api"))
	}
	if ut.Operation == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "operation"))
	}
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if ut.Primary == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "primary"))
	}
	if ut.Display == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "display"))
	}
	if ut.Drawer == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "drawer"))
	}
	if ut.Display != nil {
		if !(*ut.Display == "table" || *ut.Display == "list" || *ut.Display == "card") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.display`, *ut.Display, []interface{}{"table", "list", "card"}))
		}
	}
	if ut.Name != nil {
		if err2 := ut.Name.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range ut.Search {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Publicize creates Page from page
func (ut *page) Publicize() *Page {
	var pub Page
	if ut.API != nil {
		pub.API = *ut.API
	}
	if ut.Display != nil {
		pub.Display = *ut.Display
	}
	if ut.Drawer != nil {
		pub.Drawer = *ut.Drawer
	}
	if ut.Name != nil {
		pub.Name = ut.Name.Publicize()
	}
	if ut.Operation != nil {
		pub.Operation = *ut.Operation
	}
	if ut.Primary != nil {
		pub.Primary = *ut.Primary
	}
	if ut.Search != nil {
		pub.Search = make([]*Search, len(ut.Search))
		for i2, elem2 := range ut.Search {
			pub.Search[i2] = elem2.Publicize()
		}
	}
	return &pub
}

// A page type
type Page struct {
	// Swagger api key
	API string `form:"api" json:"api" xml:"api"`
	// Layout of display
	Display string `form:"display" json:"display" xml:"display"`
	// Displayed in the drawer
	Drawer bool `form:"drawer" json:"drawer" xml:"drawer"`
	// Title of page
	Name *Name `form:"name" json:"name" xml:"name"`
	// Swagger api.operation key
	Operation string `form:"operation" json:"operation" xml:"operation"`
	// recode primary key
	Primary string `form:"primary" json:"primary" xml:"primary"`
	// Search of page
	Search []*Search `form:"search,omitempty" json:"search,omitempty" xml:"search,omitempty"`
}

// Validate validates the Page type instance.
func (ut *Page) Validate() (err error) {
	if ut.API == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "api"))
	}
	if ut.Operation == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "operation"))
	}
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if ut.Primary == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "primary"))
	}
	if ut.Display == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "display"))
	}

	if !(ut.Display == "table" || ut.Display == "list" || ut.Display == "card") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.display`, ut.Display, []interface{}{"table", "list", "card"}))
	}
	if ut.Name != nil {
		if err2 := ut.Name.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	for _, e := range ut.Search {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// A Pagination definition
type pagination struct {
	XPaginationLimit *int    `form:"X-Pagination-Limit,omitempty" json:"X-Pagination-Limit,omitempty" xml:"X-Pagination-Limit,omitempty"`
	XPaginationNext  *string `form:"X-Pagination-Next,omitempty" json:"X-Pagination-Next,omitempty" xml:"X-Pagination-Next,omitempty"`
	XPaginationPage  *int    `form:"X-Pagination-Page,omitempty" json:"X-Pagination-Page,omitempty" xml:"X-Pagination-Page,omitempty"`
	XPaginationPrev  *string `form:"X-Pagination-Prev,omitempty" json:"X-Pagination-Prev,omitempty" xml:"X-Pagination-Prev,omitempty"`
	XPaginationTotal *int    `form:"X-Pagination-Total,omitempty" json:"X-Pagination-Total,omitempty" xml:"X-Pagination-Total,omitempty"`
}

// Validate validates the pagination type instance.
func (ut *pagination) Validate() (err error) {
	if ut.XPaginationLimit != nil {
		if *ut.XPaginationLimit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.X-Pagination-Limit`, *ut.XPaginationLimit, 1, true))
		}
	}
	if ut.XPaginationPage != nil {
		if *ut.XPaginationPage < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.X-Pagination-Page`, *ut.XPaginationPage, 0, true))
		}
	}
	if ut.XPaginationTotal != nil {
		if *ut.XPaginationTotal < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.X-Pagination-Total`, *ut.XPaginationTotal, 0, true))
		}
	}
	return
}

// Publicize creates Pagination from pagination
func (ut *pagination) Publicize() *Pagination {
	var pub Pagination
	if ut.XPaginationLimit != nil {
		pub.XPaginationLimit = ut.XPaginationLimit
	}
	if ut.XPaginationNext != nil {
		pub.XPaginationNext = ut.XPaginationNext
	}
	if ut.XPaginationPage != nil {
		pub.XPaginationPage = ut.XPaginationPage
	}
	if ut.XPaginationPrev != nil {
		pub.XPaginationPrev = ut.XPaginationPrev
	}
	if ut.XPaginationTotal != nil {
		pub.XPaginationTotal = ut.XPaginationTotal
	}
	return &pub
}

// A Pagination definition
type Pagination struct {
	XPaginationLimit *int    `form:"X-Pagination-Limit,omitempty" json:"X-Pagination-Limit,omitempty" xml:"X-Pagination-Limit,omitempty"`
	XPaginationNext  *string `form:"X-Pagination-Next,omitempty" json:"X-Pagination-Next,omitempty" xml:"X-Pagination-Next,omitempty"`
	XPaginationPage  *int    `form:"X-Pagination-Page,omitempty" json:"X-Pagination-Page,omitempty" xml:"X-Pagination-Page,omitempty"`
	XPaginationPrev  *string `form:"X-Pagination-Prev,omitempty" json:"X-Pagination-Prev,omitempty" xml:"X-Pagination-Prev,omitempty"`
	XPaginationTotal *int    `form:"X-Pagination-Total,omitempty" json:"X-Pagination-Total,omitempty" xml:"X-Pagination-Total,omitempty"`
}

// Validate validates the Pagination type instance.
func (ut *Pagination) Validate() (err error) {
	if ut.XPaginationLimit != nil {
		if *ut.XPaginationLimit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.X-Pagination-Limit`, *ut.XPaginationLimit, 1, true))
		}
	}
	if ut.XPaginationPage != nil {
		if *ut.XPaginationPage < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.X-Pagination-Page`, *ut.XPaginationPage, 0, true))
		}
	}
	if ut.XPaginationTotal != nil {
		if *ut.XPaginationTotal < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.X-Pagination-Total`, *ut.XPaginationTotal, 0, true))
		}
	}
	return
}

// A Search format
type search struct {
	// field
	Field *string `form:"field,omitempty" json:"field,omitempty" xml:"field,omitempty"`
	// path
	Path *string `form:"path,omitempty" json:"path,omitempty" xml:"path,omitempty"`
}

// Finalize sets the default values for search type instance.
func (ut *search) Finalize() {
	var defaultField = "default"
	if ut.Field == nil {
		ut.Field = &defaultField
	}
}

// Validate validates the search type instance.
func (ut *search) Validate() (err error) {
	if ut.Path == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "path"))
	}
	if ut.Field == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "field"))
	}
	if ut.Field != nil {
		if !(*ut.Field == "default" || *ut.Field == "date" || *ut.Field == "time" || *ut.Field == "datetime") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.field`, *ut.Field, []interface{}{"default", "date", "time", "datetime"}))
		}
	}
	return
}

// Publicize creates Search from search
func (ut *search) Publicize() *Search {
	var pub Search
	if ut.Field != nil {
		pub.Field = *ut.Field
	}
	if ut.Path != nil {
		pub.Path = *ut.Path
	}
	return &pub
}

// A Search format
type Search struct {
	// field
	Field string `form:"field" json:"field" xml:"field"`
	// path
	Path string `form:"path" json:"path" xml:"path"`
}

// Validate validates the Search type instance.
func (ut *Search) Validate() (err error) {
	if ut.Path == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "path"))
	}
	if ut.Field == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "field"))
	}
	if !(ut.Field == "default" || ut.Field == "date" || ut.Field == "time" || ut.Field == "datetime") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`response.field`, ut.Field, []interface{}{"default", "date", "time", "datetime"}))
	}
	return
}
