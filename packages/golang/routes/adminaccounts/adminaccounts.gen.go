// Package adminaccounts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package adminaccounts

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/cam-inc/viron/packages/golang/routes/adminusers"
	externalRef1 "github.com/cam-inc/viron/packages/golang/routes/components"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	JwtScopes = "jwt.Scopes"
)

// VironAdminAccountUpdatePayload defines model for VironAdminAccountUpdatePayload.
type VironAdminAccountUpdatePayload struct {

	// パスワード
	Password string `json:"password"`
}

// UpdateVironAdminAccountJSONBody defines parameters for UpdateVironAdminAccount.
type UpdateVironAdminAccountJSONBody VironAdminAccountUpdatePayload

// UpdateVironAdminAccountJSONRequestBody defines body for UpdateVironAdminAccount for application/json ContentType.
type UpdateVironAdminAccountJSONRequestBody UpdateVironAdminAccountJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// list admin account
	// (GET /viron/adminaccounts)
	ListVironAdminAccounts(w http.ResponseWriter, r *http.Request)
	// update an admin account
	// (PUT /viron/adminaccounts/{id})
	UpdateVironAdminAccount(w http.ResponseWriter, r *http.Request, id externalRef1.VironIdPathParam)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// ListVironAdminAccounts operation middleware
func (siw *ServerInterfaceWrapper) ListVironAdminAccounts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, JwtScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListVironAdminAccounts(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateVironAdminAccount operation middleware
func (siw *ServerInterfaceWrapper) UpdateVironAdminAccount(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id externalRef1.VironIdPathParam

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, JwtScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateVironAdminAccount(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/viron/adminaccounts", wrapper.ListVironAdminAccounts)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/viron/adminaccounts/{id}", wrapper.UpdateVironAdminAccount)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5yU32sTSxTH/5Xc01647d1kc9uLyEJp61tRsC+tYBJlujtJp2R3xpnZ1hj2Ibsoigha",
	"pFBF0D60glh/IojiPzP0138hM5N2aTZq9SU7mz0zZ87n+z2nCz4NGY1wJAV4XRD+Mg6RWS4STqPZICTR",
	"rO/TOJILLEASz6NOm6JARzBOGeaSYBPPkBBrlJsvARY+J0wSGoEHKnuk0s8qe6Oyryq7Bw40KQ+RBC/f",
	"5ABDUmKu46/9Mz1VGZ+uofKt2fLVxph9rdeDsf5f9Xrw1/TI6N/1uFqdODcz/q9bvq7Xk/6UeeBG97yT",
	"gAOywzB4ICQnUQuSxAGOb8SE4wC8Wp68cRJJl1awLyHRoSRq0mIxSBMpxQLzErJcSoiRkmDYJ03iIx0m",
	"dGoi2/rEmVXN0W2TpZLd2t8FDqxiLuyh1Uq18h84cLPMUEvjrGlhImllqXVBgzZHzwXgQZsIWZBHJ+VY",
	"0Jj72EStDkbkQCRaamNIGs6gUumWSl+pdFtlH1R29/Dl673dJypdP9p4f7i9o3o7qvdA9b6p3iY40OI0",
	"ZuDBwe6Lg4d3Dh5/OXq25doXcID88Ap9MKaA0tCMkDQSR9ccIUbAg8lKtTJhLbJsvOZaqAYoOi7f60IL",
	"y6Ji9koq29b2Sz+Z31NJwRnge+knfBmNhDX8RLWqH32d9BIx1u5bwF0ROvlxR+nVKMdN8KBir60dJCod",
	"FLZH3LwH3X4Dunn6BYG5vtAVIpfnUQtz687TNV6+aNwtsB9zIjvGMytrErxaQ6ss4jBEvNO3TsGIErW0",
	"zYbI1dCnDqPtdkmQmLaPz4a8tztAfT+7vff8nUrX959+3N94q3qbKr1fkMIOncUhPmKIoxBLzG2HnNDN",
	"YRbp5nss4LlgHmmqHIWmG/R0wEJeoEHnT6T9hZJD52hyeipJHuOkYLT/i4jPrHhs0pVQ9HuyJyffuxCh",
	"EA/rZqEb9XsAAAD//4X8j7ZDBgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./adminusers.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
