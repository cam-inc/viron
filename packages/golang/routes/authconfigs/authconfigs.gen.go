// Package authconfigs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package authconfigs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/cam-inc/viron/packages/golang/routes/components"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for VironAuthConfigType.
const (
	VironAuthConfigTypeEmail VironAuthConfigType = "email"

	VironAuthConfigTypeSignout VironAuthConfigType = "signout"

	VironAuthConfigTypeSso VironAuthConfigType = "sso"
)

// VironAuthConfig defines model for VironAuthConfig.
type VironAuthConfig struct {
	// クライアントからリクエストする際のパラメータ
	DefaultParametersValue *map[string]interface{} `json:"defaultParametersValue,omitempty"`

	// クライアントからリクエストする際のリクエストボディ
	DefaultRequestBodyValue *map[string]interface{} `json:"defaultRequestBodyValue,omitempty"`

	// 認証プロバイダ
	Provider string `json:"provider"`

	// 認証方式
	Type VironAuthConfigType `json:"type"`
}

// 認証方式
type VironAuthConfigType string

// VironAuthConfigList defines model for VironAuthConfigList.
type VironAuthConfigList []VironAuthConfig

// VironAuthConfigListWithOas defines model for VironAuthConfigListWithOas.
type VironAuthConfigListWithOas struct {
	List VironAuthConfigList `json:"list"`
	Oas  VironAuthOas        `json:"oas"`
}

// VironAuthOas defines model for VironAuthOas.
type VironAuthOas struct {
	// oas components
	Components *map[string]interface{} `json:"components,omitempty"`

	// oas info
	Info *map[string]interface{} `json:"info,omitempty"`

	// oas paths
	Paths *map[string]interface{} `json:"paths,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// list auth configs
	// (GET /viron/authconfigs)
	ListVironAuthconfigs(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// ListVironAuthconfigs operation middleware
func (siw *ServerInterfaceWrapper) ListVironAuthconfigs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListVironAuthconfigs(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/viron/authconfigs", wrapper.ListVironAuthconfigs)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xUzW4TPRR9leh+33KUCWU3K35WCKQiFmVRZeFObiauZmzX9kRE0Uh0vABUoQKLVhQ2",
	"/CxKpZYFq0oVPIwVVN4C2ZM2yXSCALGJIh/7nHPvPXfGEPNMcIZMK4jGoOIBZsT/XaOSs5u5HtzmrE8T",
	"dyQkFyg1RX+hh32Sp/o+kSRDjVKtkTTHClGxpEJTziACW3625pMtP9ryvTVfrHlqt3ds+cyaIweVh7Y8",
	"9Yevbbnz4+CN3T6x5qV7Yt5Zc2bLbxCAHgmECPjGJsYaiuBC/QFu5aj0Ld4b/Uv5Rci8teaJLT80+RCS",
	"D2kP5VXh86Pn54dn1uxbc2zNC+fAPIYA8BHJROpYEs6TFGesSkvKEsdaHTQzft87nZztOiKWZxCtA2aE",
	"phCAUtz90oTxXEN3XqmCajJFABK3ciqx52guK5le7DZUWwvFPaq0s0k1Zj4T/0vsQwT/hbNYhdNMhfVA",
	"XZYJREoyWkL/kOrBapXIxfilU+0/kPR2iwA4+X2zTrveKS9d0fyySY2+FxduccCcqNYc3sBNWZ83v/NI",
	"U0CJHiyRqqArb4qrJ0uVSa4HsW+uahFBW0pgTPs0Jg733FT7BN4Yuq6EKd1ozb2BAIYoVcXVaXfa1/x8",
	"BDIiKERwvd1pr8BcEWFFM08RjSFBvWxbzg+PJycHtnw12d2bfN2v1hy8hvQm7/QgApeMy7HNvElUgjNV",
	"DW6l06nmxzQyr0eESKelhpvKiV58Qf8imBdB981erGT1rh+KyrOMyBFEPoC+ja2ZV01cL9ZhWFuzriec",
	"omNgJHPjqN8qusXPAAAA//+hbfWJDAYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
