// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package auth

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/go-chi/chi/v5"
)

// OAuth2GoogleCallbackPayload defines model for OAuth2GoogleCallbackPayload.
type OAuth2GoogleCallbackPayload struct {

	// Googleが発行した認可コード
	Code string `json:"code"`

	// GoogleOAuth2コールバックURI
	RedirectUri string `json:"redirectUri"`

	// CSRF対策用のステートパラメータ
	State string `json:"state"`
}

// SigninEmailPayload defines model for SigninEmailPayload.
type SigninEmailPayload struct {

	// Eメールアドレス
	Email openapi_types.Email `json:"email"`

	// パスワード
	Password string `json:"password"`
}

// RedirectUriQueryParam defines model for RedirectUriQueryParam.
type RedirectUriQueryParam string

// SigninEmailJSONBody defines parameters for SigninEmail.
type SigninEmailJSONBody SigninEmailPayload

// Oauth2GoogleAuthorizationParams defines parameters for Oauth2GoogleAuthorization.
type Oauth2GoogleAuthorizationParams struct {
	RedirectUri RedirectUriQueryParam `json:"redirectUri"`
}

// Oauth2GoogleCallbackJSONBody defines parameters for Oauth2GoogleCallback.
type Oauth2GoogleCallbackJSONBody OAuth2GoogleCallbackPayload

// SigninEmailJSONRequestBody defines body for SigninEmail for application/json ContentType.
type SigninEmailJSONRequestBody SigninEmailJSONBody

// Oauth2GoogleCallbackJSONRequestBody defines body for Oauth2GoogleCallback for application/json ContentType.
type Oauth2GoogleCallbackJSONRequestBody Oauth2GoogleCallbackJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// signin to viron with email/password
	// (POST /email/signin)
	SigninEmail(w http.ResponseWriter, r *http.Request)
	// redirect to google oauth
	// (GET /oauth2/google/authorization)
	Oauth2GoogleAuthorization(w http.ResponseWriter, r *http.Request, params Oauth2GoogleAuthorizationParams)
	// callback from google oauth
	// (POST /oauth2/google/callback)
	Oauth2GoogleCallback(w http.ResponseWriter, r *http.Request)
	// signout of viron
	// (POST /signout)
	Signout(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// SigninEmail operation middleware
func (siw *ServerInterfaceWrapper) SigninEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SigninEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Oauth2GoogleAuthorization operation middleware
func (siw *ServerInterfaceWrapper) Oauth2GoogleAuthorization(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params Oauth2GoogleAuthorizationParams

	// ------------- Required query parameter "redirectUri" -------------
	if paramValue := r.URL.Query().Get("redirectUri"); paramValue != "" {

	} else {
		http.Error(w, "Query argument redirectUri is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "redirectUri", r.URL.Query(), &params.RedirectUri)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter redirectUri: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Oauth2GoogleAuthorization(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Oauth2GoogleCallback operation middleware
func (siw *ServerInterfaceWrapper) Oauth2GoogleCallback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Oauth2GoogleCallback(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Signout operation middleware
func (siw *ServerInterfaceWrapper) Signout(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Signout(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/email/signin", wrapper.SigninEmail)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/oauth2/google/authorization", wrapper.Oauth2GoogleAuthorization)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/oauth2/google/callback", wrapper.Oauth2GoogleCallback)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/signout", wrapper.Signout)
	})

	return r
}
