// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package auth

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/cam-inc/viron/packages/golang/routes/components"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// OAuth2GoogleCallbackPayload defines model for OAuth2GoogleCallbackPayload.
type OAuth2GoogleCallbackPayload struct {
	// Googleが発行した認可コード
	Code string `json:"code"`

	// GoogleOAuth2コールバックURI
	RedirectUri string `json:"redirectUri"`

	// CSRF対策用のステートパラメータ
	State string `json:"state"`
}

// OidcCallbackPayload defines model for OidcCallbackPayload.
type OidcCallbackPayload struct {
	// OIDC Idpが発行した認可コード
	Code string `json:"code"`

	// OIDCコールバックURI
	RedirectUri string `json:"redirectUri"`

	// CSRF対策用のステートパラメータ
	State string `json:"state"`
}

// SigninEmailPayload defines model for SigninEmailPayload.
type SigninEmailPayload struct {
	// Eメールアドレス
	Email openapi_types.Email `json:"email"`

	// パスワード
	Password string `json:"password"`
}

// RedirectUriQueryParam defines model for RedirectUriQueryParam.
type RedirectUriQueryParam string

// SigninEmailJSONBody defines parameters for SigninEmail.
type SigninEmailJSONBody SigninEmailPayload

// Oauth2GoogleAuthorizationParams defines parameters for Oauth2GoogleAuthorization.
type Oauth2GoogleAuthorizationParams struct {
	RedirectUri RedirectUriQueryParam `json:"redirectUri"`
}

// Oauth2GoogleCallbackJSONBody defines parameters for Oauth2GoogleCallback.
type Oauth2GoogleCallbackJSONBody OAuth2GoogleCallbackPayload

// OidcAuthorizationParams defines parameters for OidcAuthorization.
type OidcAuthorizationParams struct {
	RedirectUri RedirectUriQueryParam `json:"redirectUri"`
}

// OidcCallbackJSONBody defines parameters for OidcCallback.
type OidcCallbackJSONBody OidcCallbackPayload

// SigninEmailJSONRequestBody defines body for SigninEmail for application/json ContentType.
type SigninEmailJSONRequestBody SigninEmailJSONBody

// Oauth2GoogleCallbackJSONRequestBody defines body for Oauth2GoogleCallback for application/json ContentType.
type Oauth2GoogleCallbackJSONRequestBody Oauth2GoogleCallbackJSONBody

// OidcCallbackJSONRequestBody defines body for OidcCallback for application/json ContentType.
type OidcCallbackJSONRequestBody OidcCallbackJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// signin to viron with email/password
	// (POST /email/signin)
	SigninEmail(w http.ResponseWriter, r *http.Request)
	// redirect to google oauth
	// (GET /oauth2/google/authorization)
	Oauth2GoogleAuthorization(w http.ResponseWriter, r *http.Request, params Oauth2GoogleAuthorizationParams)
	// callback from google oauth
	// (POST /oauth2/google/callback)
	Oauth2GoogleCallback(w http.ResponseWriter, r *http.Request)
	// redirect to oidc idp authorization
	// (GET /oidc/authorization)
	OidcAuthorization(w http.ResponseWriter, r *http.Request, params OidcAuthorizationParams)
	// callback from oidc
	// (POST /oidc/callback)
	OidcCallback(w http.ResponseWriter, r *http.Request)
	// signout of viron
	// (POST /signout)
	Signout(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// SigninEmail operation middleware
func (siw *ServerInterfaceWrapper) SigninEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SigninEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Oauth2GoogleAuthorization operation middleware
func (siw *ServerInterfaceWrapper) Oauth2GoogleAuthorization(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params Oauth2GoogleAuthorizationParams

	// ------------- Required query parameter "redirectUri" -------------
	if paramValue := r.URL.Query().Get("redirectUri"); paramValue != "" {

	} else {
		http.Error(w, "Query argument redirectUri is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "redirectUri", r.URL.Query(), &params.RedirectUri)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter redirectUri: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Oauth2GoogleAuthorization(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Oauth2GoogleCallback operation middleware
func (siw *ServerInterfaceWrapper) Oauth2GoogleCallback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Oauth2GoogleCallback(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OidcAuthorization operation middleware
func (siw *ServerInterfaceWrapper) OidcAuthorization(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OidcAuthorizationParams

	// ------------- Required query parameter "redirectUri" -------------
	if paramValue := r.URL.Query().Get("redirectUri"); paramValue != "" {

	} else {
		http.Error(w, "Query argument redirectUri is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "redirectUri", r.URL.Query(), &params.RedirectUri)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter redirectUri: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OidcAuthorization(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OidcCallback operation middleware
func (siw *ServerInterfaceWrapper) OidcCallback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OidcCallback(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Signout operation middleware
func (siw *ServerInterfaceWrapper) Signout(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Signout(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/email/signin", wrapper.SigninEmail)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/oauth2/google/authorization", wrapper.Oauth2GoogleAuthorization)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/oauth2/google/callback", wrapper.Oauth2GoogleCallback)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/oidc/authorization", wrapper.OidcAuthorization)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/oidc/callback", wrapper.OidcCallback)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/signout", wrapper.Signout)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RX/2/bRBT/V8xt/DKcOEsRQpHQVspAERMZqcoPtAFd7Utyw/Z55/NGFlnCtoSo1okv",
	"mkD7AaENNJV2a5AmJAZj+2OOquW/QO/sfHHirFVpJfilsX3vvfu8z+fee9c+MpnjMZe4wke1PvIwxw4R",
	"hKu3JrEoJ6ZY4fT9gPDeFViFBeqiGroGn5COXOwQVEN8bIx0xMm1gHJioZrgAdGRb3aJg8G3zbiDBaqh",
	"QBmKngfevuDU7aAwDIe2CkFjMRDd6juMdWyyhG17HZufXME9m2FLweXMI1xQooxNZhH4tYhvcuoJygBm",
	"6iyjzf27vx/c25TRdzL64WD79t6XAxk/lslTmWzM4tBz+cwJmqIbRtmRyVcySWQ8WGnWiyL6AosCgEvL",
	"zbf3Bs/2H327f2dLRrsyfiKTz1XIL2TytUx+lsk9eI2fF/A1SfVqSsFwp3wOrZEvW79KTAGIGtQyj0lr",
	"o/7Wkla3vBMmFsL+jwldph2XupccTO25fBJYnUV9KQOV7Mj4vkw2ZPJQxk+QPi6Y1LGABw/7/g3Grdmg",
	"kC5kPxjJMYo2cgJ/IQgH+4/K5y6s4tLNxdKHa2vWSxfOnH15LahUqq9dPPeKUfoYnhfMN9QPafVf18ND",
	"CRyCHm03Sxu4ULfNZuHjQHQ17FHN94hJ29TEsODDplTYEOPidcqZa9h0XQNjpKPrhPupd6VcKZ8HfphH",
	"XOxRVEML5Uq5mmbcVWIYCp/hK92UVswXBeKA1aQuMtqa4lbG3/z153MZ/SijBx8AKBntyPhXGf8kk8fZ",
	"3+iujG8hBYirVOoWqk0emqxzEl+8yaxeWn2uIK6ChD3PzigwrvpMwR331bOctFENnTHGHd3IOqlRcCzD",
	"vFDQpdUH32Ounx7UauXVWSbeY9pSBkn16sBxMO+B/moPTTBNSaLdoKKrpexOHDWBOz4cCyVWCyIYDJ6r",
	"Rke1VANeGKc3cbpfH3WImN/Ud1ULTpvO/p0//v7+vox+k8m2TD5TlD+U8QCqvpj4Bh5Pl8XcvnpuEq4W",
	"szs2MYonZdiaYnShcn42l6EvUJdi0VRW2krzcnmKZD5hmxKmsezc55nV0acleDKZ26adkkXaOLBFKT/f",
	"c50Yne2rUKNUmvUwPSVTCpnZwJhfLWkWqSp7zzZVC55t6ZdfqMdwLJ1SRbzoYvHvS2NatiFlWpsz51jC",
	"TXFwZOWoZR6xpNTkjXap5WkH27cPtp4eo56oZf436kjdTnJQDqsmYEqD5PFUAidRV9Qy54lzeDVBLseo",
	"pYmr3WnVUMHt8bRrBzg7qZopVgXmGAvEfD2y4X5LxhsyeSTjX+BeED+YXxbLWcSj8NB4t2CsskBorJ3O",
	"1YIZGo4+9Yf/jKmlsBX+EwAA//8xvOvL4A0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
