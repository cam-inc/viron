// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package auth

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/cam-inc/viron/packages/golang/routes/components"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// SigninEmailPayload defines model for SigninEmailPayload.
type SigninEmailPayload struct {
	// Eメールアドレス
	Email openapi_types.Email `json:"email"`

	// パスワード
	Password string `json:"password"`
}

// SsoOidcCallbackPayload defines model for SsoOidcCallbackPayload.
type SsoOidcCallbackPayload struct {
	// SSO OIDCクライアントID
	ClientId string `json:"clientId"`

	// SSO OIDC Idpが発行した認可コード
	Code string `json:"code"`

	// SSO OIDCコールバックURI
	RedirectUri string `json:"redirectUri"`

	// CSRF対策用のステートパラメータ
	State string `json:"state"`
}

// ClientIdQueryParam defines model for ClientIdQueryParam.
type ClientIdQueryParam string

// RedirectUriQueryParam defines model for RedirectUriQueryParam.
type RedirectUriQueryParam string

// SigninEmailJSONBody defines parameters for SigninEmail.
type SigninEmailJSONBody SigninEmailPayload

// SsoOidcAuthorizationParams defines parameters for SsoOidcAuthorization.
type SsoOidcAuthorizationParams struct {
	RedirectUri RedirectUriQueryParam `json:"redirectUri"`
	ClientId    ClientIdQueryParam    `json:"clientId"`
}

// SsoOidcCallbackJSONBody defines parameters for SsoOidcCallback.
type SsoOidcCallbackJSONBody SsoOidcCallbackPayload

// SigninEmailJSONRequestBody defines body for SigninEmail for application/json ContentType.
type SigninEmailJSONRequestBody SigninEmailJSONBody

// SsoOidcCallbackJSONRequestBody defines body for SsoOidcCallback for application/json ContentType.
type SsoOidcCallbackJSONRequestBody SsoOidcCallbackJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// signin to viron with email/password
	// (POST /email/signin)
	SigninEmail(w http.ResponseWriter, r *http.Request)
	// signout of viron
	// (POST /signout)
	Signout(w http.ResponseWriter, r *http.Request)
	// redirect to sso oidc idp authorization
	// (GET /sso/oidc/authorization)
	SsoOidcAuthorization(w http.ResponseWriter, r *http.Request, params SsoOidcAuthorizationParams)
	// callback from sso oidc idp
	// (POST /sso/oidc/callback)
	SsoOidcCallback(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// SigninEmail operation middleware
func (siw *ServerInterfaceWrapper) SigninEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SigninEmail(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Signout operation middleware
func (siw *ServerInterfaceWrapper) Signout(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Signout(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// SsoOidcAuthorization operation middleware
func (siw *ServerInterfaceWrapper) SsoOidcAuthorization(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SsoOidcAuthorizationParams

	// ------------- Required query parameter "redirectUri" -------------
	if paramValue := r.URL.Query().Get("redirectUri"); paramValue != "" {

	} else {
		http.Error(w, "Query argument redirectUri is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "redirectUri", r.URL.Query(), &params.RedirectUri)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter redirectUri: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "clientId" -------------
	if paramValue := r.URL.Query().Get("clientId"); paramValue != "" {

	} else {
		http.Error(w, "Query argument clientId is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "clientId", r.URL.Query(), &params.ClientId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter clientId: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SsoOidcAuthorization(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// SsoOidcCallback operation middleware
func (siw *ServerInterfaceWrapper) SsoOidcCallback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SsoOidcCallback(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/email/signin", wrapper.SigninEmail)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/signout", wrapper.Signout)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sso/oidc/authorization", wrapper.SsoOidcAuthorization)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sso/oidc/callback", wrapper.SsoOidcCallback)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWXW/cRBT9K2YaXop3vU0QQiuhtmyLtKIiZVfhgWRBE3t2M2XtcWfGLduVJWxLqFFT",
	"8aEK1AeEWlCVph+LFCFRKO2PGaKEf4Hu2Ov9sLeJVPGSeMdz79x7zrlnPEQ2c33mEU8KVB8iH3PsEkm4",
	"/tXoU+LJpvNxQPjgMryCVeqhOroKS8hEHnYJqiM724lMxMnVgHLioLrkATGRsLeIiyGwy7iLJaqjgFNk",
	"IjnwIVRITr0eCkMTtYhDObHlGqfHH8knm1/n1HC8V3fcpj2PehddTPuX8aDPsKNR4cwnXFKi9xB4Cw8O",
	"ETanvqQMyruoknsqea6SRyq+r5JtlTxW8TNkTgpIAwslmMjHQlxn3CkmVcl3Kn6mkpHOvD2dLQ+CeCkJ",
	"h/2fVU+fXceVG+crn25sOG+cPbX05kZQqy2/c+70W1blc3hesd/T/0hn+K4ZlvIwAXM9Lzo/rpNHsM0r",
	"xJbQQFuwVerYDdzvb2L7i4XQ5TIpNNpurxqrzQsNFY9U8lDFv2oQ91Vys3mhDDKbOWRxFqPp+CraObz7",
	"59G9HRX9qKKfj/ZuH3wzUvF+jmQh57SiXlHgfsZy8q1KEhWP1lrNsmxCYllSYqPd+uBg9OLwyQ+Hd3ZV",
	"9FTT+7VOeRPYTh5mOopfHsuNBmF8kjk3ETnWRcIgD/W6rFgdDuSWgX1qCJ/YtEttDC8EVEJlH3Kcu0Y5",
	"86w+3TRgMzLRNcJFGl2r1qpnoHfmEw/7FNXRSrVWXU4luqUlYGlBWUIPmlYIE7JkmmDX9CCpaHduGFT8",
	"/T9/v1TRLyp68AkUpaJHKv4dtJPsZ3+juyq+hXRBXLcC2pue8sw6iJDvM2egNco8STxdEvb9fgaBdUUw",
	"Xe7EWJY46aI6OmVNLNTKrMQq8ZFwlj2wKb0gfOaJdDyWa28XkfiIGY2sJG1WgetiPgBR6DMMyQxNiXGd",
	"yi0jRXfKGyTuCdCKJqsDGTT2LJCLwc/QvKXibZU8UfFvQET8ABS6GFDIeJJ+Vj8s6YMF0mDdtJEFRQtm",
	"MerYFqwxTm/gNN8Q9Yh8xbhGT6njG0d7t492nx/e+evfn+6r6A+V7KnkK62Rx9pxFjaWGtv5mTPNmWty",
	"vVwJky1W+bUWmscGlty/YWcO45XamWL34xNBHLknzjRhrLUuVeeI4FNRQjAD4DYAPTzX/iw9JvqyAk82",
	"87q0V3FIFwd9WZn9lJjxVrQ0hNw5Lq1mmI7HhGU7u0oWi3TcV2rsBy92tJkWzfnSIlLHt9X/ZQHld+Lr",
	"28A8bWOojC5n7gxxJ6Vqrv2TcBXmqYfjDzJ9RNgJ/wsAAP//sl7PXFQKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./components.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
