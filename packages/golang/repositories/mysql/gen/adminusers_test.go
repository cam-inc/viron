// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAdminusers(t *testing.T) {
	t.Parallel()

	query := Adminusers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAdminusersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuser{}
	if err = randomize.Struct(seed, o, adminuserDBTypes, true, adminuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Adminusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdminusersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuser{}
	if err = randomize.Struct(seed, o, adminuserDBTypes, true, adminuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Adminusers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Adminusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdminusersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuser{}
	if err = randomize.Struct(seed, o, adminuserDBTypes, true, adminuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AdminuserSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Adminusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdminusersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuser{}
	if err = randomize.Struct(seed, o, adminuserDBTypes, true, adminuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AdminuserExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Adminuser exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AdminuserExists to return true, but got false.")
	}
}

func testAdminusersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuser{}
	if err = randomize.Struct(seed, o, adminuserDBTypes, true, adminuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	adminuserFound, err := FindAdminuser(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if adminuserFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAdminusersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuser{}
	if err = randomize.Struct(seed, o, adminuserDBTypes, true, adminuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Adminusers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAdminusersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuser{}
	if err = randomize.Struct(seed, o, adminuserDBTypes, true, adminuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Adminusers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAdminusersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	adminuserOne := &Adminuser{}
	adminuserTwo := &Adminuser{}
	if err = randomize.Struct(seed, adminuserOne, adminuserDBTypes, false, adminuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}
	if err = randomize.Struct(seed, adminuserTwo, adminuserDBTypes, false, adminuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = adminuserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = adminuserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Adminusers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAdminusersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	adminuserOne := &Adminuser{}
	adminuserTwo := &Adminuser{}
	if err = randomize.Struct(seed, adminuserOne, adminuserDBTypes, false, adminuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}
	if err = randomize.Struct(seed, adminuserTwo, adminuserDBTypes, false, adminuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = adminuserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = adminuserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Adminusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func adminuserBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Adminuser) error {
	*o = Adminuser{}
	return nil
}

func adminuserAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Adminuser) error {
	*o = Adminuser{}
	return nil
}

func adminuserAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Adminuser) error {
	*o = Adminuser{}
	return nil
}

func adminuserBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Adminuser) error {
	*o = Adminuser{}
	return nil
}

func adminuserAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Adminuser) error {
	*o = Adminuser{}
	return nil
}

func adminuserBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Adminuser) error {
	*o = Adminuser{}
	return nil
}

func adminuserAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Adminuser) error {
	*o = Adminuser{}
	return nil
}

func adminuserBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Adminuser) error {
	*o = Adminuser{}
	return nil
}

func adminuserAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Adminuser) error {
	*o = Adminuser{}
	return nil
}

func testAdminusersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Adminuser{}
	o := &Adminuser{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, adminuserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Adminuser object: %s", err)
	}

	AddAdminuserHook(boil.BeforeInsertHook, adminuserBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	adminuserBeforeInsertHooks = []AdminuserHook{}

	AddAdminuserHook(boil.AfterInsertHook, adminuserAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	adminuserAfterInsertHooks = []AdminuserHook{}

	AddAdminuserHook(boil.AfterSelectHook, adminuserAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	adminuserAfterSelectHooks = []AdminuserHook{}

	AddAdminuserHook(boil.BeforeUpdateHook, adminuserBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	adminuserBeforeUpdateHooks = []AdminuserHook{}

	AddAdminuserHook(boil.AfterUpdateHook, adminuserAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	adminuserAfterUpdateHooks = []AdminuserHook{}

	AddAdminuserHook(boil.BeforeDeleteHook, adminuserBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	adminuserBeforeDeleteHooks = []AdminuserHook{}

	AddAdminuserHook(boil.AfterDeleteHook, adminuserAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	adminuserAfterDeleteHooks = []AdminuserHook{}

	AddAdminuserHook(boil.BeforeUpsertHook, adminuserBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	adminuserBeforeUpsertHooks = []AdminuserHook{}

	AddAdminuserHook(boil.AfterUpsertHook, adminuserAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	adminuserAfterUpsertHooks = []AdminuserHook{}
}

func testAdminusersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuser{}
	if err = randomize.Struct(seed, o, adminuserDBTypes, true, adminuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Adminusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAdminusersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuser{}
	if err = randomize.Struct(seed, o, adminuserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(adminuserColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Adminusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAdminusersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuser{}
	if err = randomize.Struct(seed, o, adminuserDBTypes, true, adminuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAdminusersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuser{}
	if err = randomize.Struct(seed, o, adminuserDBTypes, true, adminuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AdminuserSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAdminusersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuser{}
	if err = randomize.Struct(seed, o, adminuserDBTypes, true, adminuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Adminusers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	adminuserDBTypes = map[string]string{`ID`: `int`, `Email`: `varchar`, `AuthType`: `varchar`, `Password`: `varchar`, `Salt`: `varchar`, `GoogleOAuth2AccessToken`: `varchar`, `GoogleOAuth2ExpiryDate`: `int`, `GoogleOAuth2IdToken`: `varchar`, `GoogleOAuth2RefreshToken`: `varchar`, `GoogleOAuth2TokenType`: `varchar`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_                = bytes.MinRead
)

func testAdminusersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(adminuserPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(adminuserAllColumns) == len(adminuserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Adminuser{}
	if err = randomize.Struct(seed, o, adminuserDBTypes, true, adminuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Adminusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, adminuserDBTypes, true, adminuserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAdminusersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(adminuserAllColumns) == len(adminuserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Adminuser{}
	if err = randomize.Struct(seed, o, adminuserDBTypes, true, adminuserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Adminusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, adminuserDBTypes, true, adminuserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(adminuserAllColumns, adminuserPrimaryKeyColumns) {
		fields = adminuserAllColumns
	} else {
		fields = strmangle.SetComplement(
			adminuserAllColumns,
			adminuserPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AdminuserSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAdminusersUpsert(t *testing.T) {
	t.Parallel()

	if len(adminuserAllColumns) == len(adminuserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAdminuserUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Adminuser{}
	if err = randomize.Struct(seed, &o, adminuserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Adminuser: %s", err)
	}

	count, err := Adminusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, adminuserDBTypes, false, adminuserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Adminuser struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Adminuser: %s", err)
	}

	count, err = Adminusers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
