// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRevokedtokens(t *testing.T) {
	t.Parallel()

	query := Revokedtokens()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRevokedtokensDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revokedtoken{}
	if err = randomize.Struct(seed, o, revokedtokenDBTypes, true, revokedtokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Revokedtokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRevokedtokensQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revokedtoken{}
	if err = randomize.Struct(seed, o, revokedtokenDBTypes, true, revokedtokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Revokedtokens().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Revokedtokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRevokedtokensSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revokedtoken{}
	if err = randomize.Struct(seed, o, revokedtokenDBTypes, true, revokedtokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RevokedtokenSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Revokedtokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRevokedtokensExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revokedtoken{}
	if err = randomize.Struct(seed, o, revokedtokenDBTypes, true, revokedtokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RevokedtokenExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Revokedtoken exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RevokedtokenExists to return true, but got false.")
	}
}

func testRevokedtokensFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revokedtoken{}
	if err = randomize.Struct(seed, o, revokedtokenDBTypes, true, revokedtokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	revokedtokenFound, err := FindRevokedtoken(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if revokedtokenFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRevokedtokensBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revokedtoken{}
	if err = randomize.Struct(seed, o, revokedtokenDBTypes, true, revokedtokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Revokedtokens().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRevokedtokensOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revokedtoken{}
	if err = randomize.Struct(seed, o, revokedtokenDBTypes, true, revokedtokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Revokedtokens().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRevokedtokensAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	revokedtokenOne := &Revokedtoken{}
	revokedtokenTwo := &Revokedtoken{}
	if err = randomize.Struct(seed, revokedtokenOne, revokedtokenDBTypes, false, revokedtokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}
	if err = randomize.Struct(seed, revokedtokenTwo, revokedtokenDBTypes, false, revokedtokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = revokedtokenOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = revokedtokenTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Revokedtokens().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRevokedtokensCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	revokedtokenOne := &Revokedtoken{}
	revokedtokenTwo := &Revokedtoken{}
	if err = randomize.Struct(seed, revokedtokenOne, revokedtokenDBTypes, false, revokedtokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}
	if err = randomize.Struct(seed, revokedtokenTwo, revokedtokenDBTypes, false, revokedtokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = revokedtokenOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = revokedtokenTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Revokedtokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func revokedtokenBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Revokedtoken) error {
	*o = Revokedtoken{}
	return nil
}

func revokedtokenAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Revokedtoken) error {
	*o = Revokedtoken{}
	return nil
}

func revokedtokenAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Revokedtoken) error {
	*o = Revokedtoken{}
	return nil
}

func revokedtokenBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Revokedtoken) error {
	*o = Revokedtoken{}
	return nil
}

func revokedtokenAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Revokedtoken) error {
	*o = Revokedtoken{}
	return nil
}

func revokedtokenBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Revokedtoken) error {
	*o = Revokedtoken{}
	return nil
}

func revokedtokenAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Revokedtoken) error {
	*o = Revokedtoken{}
	return nil
}

func revokedtokenBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Revokedtoken) error {
	*o = Revokedtoken{}
	return nil
}

func revokedtokenAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Revokedtoken) error {
	*o = Revokedtoken{}
	return nil
}

func testRevokedtokensHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Revokedtoken{}
	o := &Revokedtoken{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, revokedtokenDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Revokedtoken object: %s", err)
	}

	AddRevokedtokenHook(boil.BeforeInsertHook, revokedtokenBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	revokedtokenBeforeInsertHooks = []RevokedtokenHook{}

	AddRevokedtokenHook(boil.AfterInsertHook, revokedtokenAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	revokedtokenAfterInsertHooks = []RevokedtokenHook{}

	AddRevokedtokenHook(boil.AfterSelectHook, revokedtokenAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	revokedtokenAfterSelectHooks = []RevokedtokenHook{}

	AddRevokedtokenHook(boil.BeforeUpdateHook, revokedtokenBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	revokedtokenBeforeUpdateHooks = []RevokedtokenHook{}

	AddRevokedtokenHook(boil.AfterUpdateHook, revokedtokenAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	revokedtokenAfterUpdateHooks = []RevokedtokenHook{}

	AddRevokedtokenHook(boil.BeforeDeleteHook, revokedtokenBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	revokedtokenBeforeDeleteHooks = []RevokedtokenHook{}

	AddRevokedtokenHook(boil.AfterDeleteHook, revokedtokenAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	revokedtokenAfterDeleteHooks = []RevokedtokenHook{}

	AddRevokedtokenHook(boil.BeforeUpsertHook, revokedtokenBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	revokedtokenBeforeUpsertHooks = []RevokedtokenHook{}

	AddRevokedtokenHook(boil.AfterUpsertHook, revokedtokenAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	revokedtokenAfterUpsertHooks = []RevokedtokenHook{}
}

func testRevokedtokensInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revokedtoken{}
	if err = randomize.Struct(seed, o, revokedtokenDBTypes, true, revokedtokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Revokedtokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRevokedtokensInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revokedtoken{}
	if err = randomize.Struct(seed, o, revokedtokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(revokedtokenColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Revokedtokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRevokedtokensReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revokedtoken{}
	if err = randomize.Struct(seed, o, revokedtokenDBTypes, true, revokedtokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRevokedtokensReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revokedtoken{}
	if err = randomize.Struct(seed, o, revokedtokenDBTypes, true, revokedtokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RevokedtokenSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRevokedtokensSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Revokedtoken{}
	if err = randomize.Struct(seed, o, revokedtokenDBTypes, true, revokedtokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Revokedtokens().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	revokedtokenDBTypes = map[string]string{`ID`: `int`, `Token`: `varchar`, `RevokedAt`: `datetime`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_                   = bytes.MinRead
)

func testRevokedtokensUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(revokedtokenPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(revokedtokenAllColumns) == len(revokedtokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Revokedtoken{}
	if err = randomize.Struct(seed, o, revokedtokenDBTypes, true, revokedtokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Revokedtokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, revokedtokenDBTypes, true, revokedtokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRevokedtokensSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(revokedtokenAllColumns) == len(revokedtokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Revokedtoken{}
	if err = randomize.Struct(seed, o, revokedtokenDBTypes, true, revokedtokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Revokedtokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, revokedtokenDBTypes, true, revokedtokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(revokedtokenAllColumns, revokedtokenPrimaryKeyColumns) {
		fields = revokedtokenAllColumns
	} else {
		fields = strmangle.SetComplement(
			revokedtokenAllColumns,
			revokedtokenPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RevokedtokenSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRevokedtokensUpsert(t *testing.T) {
	t.Parallel()

	if len(revokedtokenAllColumns) == len(revokedtokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRevokedtokenUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Revokedtoken{}
	if err = randomize.Struct(seed, &o, revokedtokenDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Revokedtoken: %s", err)
	}

	count, err := Revokedtokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, revokedtokenDBTypes, false, revokedtokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Revokedtoken struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Revokedtoken: %s", err)
	}

	count, err = Revokedtokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
