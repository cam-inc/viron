// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAdminuserssotokens(t *testing.T) {
	t.Parallel()

	query := Adminuserssotokens()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAdminuserssotokensDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuserssotoken{}
	if err = randomize.Struct(seed, o, adminuserssotokenDBTypes, true, adminuserssotokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Adminuserssotokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdminuserssotokensQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuserssotoken{}
	if err = randomize.Struct(seed, o, adminuserssotokenDBTypes, true, adminuserssotokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Adminuserssotokens().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Adminuserssotokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdminuserssotokensSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuserssotoken{}
	if err = randomize.Struct(seed, o, adminuserssotokenDBTypes, true, adminuserssotokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AdminuserssotokenSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Adminuserssotokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdminuserssotokensExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuserssotoken{}
	if err = randomize.Struct(seed, o, adminuserssotokenDBTypes, true, adminuserssotokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AdminuserssotokenExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Adminuserssotoken exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AdminuserssotokenExists to return true, but got false.")
	}
}

func testAdminuserssotokensFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuserssotoken{}
	if err = randomize.Struct(seed, o, adminuserssotokenDBTypes, true, adminuserssotokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	adminuserssotokenFound, err := FindAdminuserssotoken(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if adminuserssotokenFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAdminuserssotokensBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuserssotoken{}
	if err = randomize.Struct(seed, o, adminuserssotokenDBTypes, true, adminuserssotokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Adminuserssotokens().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAdminuserssotokensOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuserssotoken{}
	if err = randomize.Struct(seed, o, adminuserssotokenDBTypes, true, adminuserssotokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Adminuserssotokens().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAdminuserssotokensAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	adminuserssotokenOne := &Adminuserssotoken{}
	adminuserssotokenTwo := &Adminuserssotoken{}
	if err = randomize.Struct(seed, adminuserssotokenOne, adminuserssotokenDBTypes, false, adminuserssotokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}
	if err = randomize.Struct(seed, adminuserssotokenTwo, adminuserssotokenDBTypes, false, adminuserssotokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = adminuserssotokenOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = adminuserssotokenTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Adminuserssotokens().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAdminuserssotokensCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	adminuserssotokenOne := &Adminuserssotoken{}
	adminuserssotokenTwo := &Adminuserssotoken{}
	if err = randomize.Struct(seed, adminuserssotokenOne, adminuserssotokenDBTypes, false, adminuserssotokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}
	if err = randomize.Struct(seed, adminuserssotokenTwo, adminuserssotokenDBTypes, false, adminuserssotokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = adminuserssotokenOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = adminuserssotokenTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Adminuserssotokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func adminuserssotokenBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Adminuserssotoken) error {
	*o = Adminuserssotoken{}
	return nil
}

func adminuserssotokenAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Adminuserssotoken) error {
	*o = Adminuserssotoken{}
	return nil
}

func adminuserssotokenAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Adminuserssotoken) error {
	*o = Adminuserssotoken{}
	return nil
}

func adminuserssotokenBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Adminuserssotoken) error {
	*o = Adminuserssotoken{}
	return nil
}

func adminuserssotokenAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Adminuserssotoken) error {
	*o = Adminuserssotoken{}
	return nil
}

func adminuserssotokenBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Adminuserssotoken) error {
	*o = Adminuserssotoken{}
	return nil
}

func adminuserssotokenAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Adminuserssotoken) error {
	*o = Adminuserssotoken{}
	return nil
}

func adminuserssotokenBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Adminuserssotoken) error {
	*o = Adminuserssotoken{}
	return nil
}

func adminuserssotokenAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Adminuserssotoken) error {
	*o = Adminuserssotoken{}
	return nil
}

func testAdminuserssotokensHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Adminuserssotoken{}
	o := &Adminuserssotoken{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, adminuserssotokenDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken object: %s", err)
	}

	AddAdminuserssotokenHook(boil.BeforeInsertHook, adminuserssotokenBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	adminuserssotokenBeforeInsertHooks = []AdminuserssotokenHook{}

	AddAdminuserssotokenHook(boil.AfterInsertHook, adminuserssotokenAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	adminuserssotokenAfterInsertHooks = []AdminuserssotokenHook{}

	AddAdminuserssotokenHook(boil.AfterSelectHook, adminuserssotokenAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	adminuserssotokenAfterSelectHooks = []AdminuserssotokenHook{}

	AddAdminuserssotokenHook(boil.BeforeUpdateHook, adminuserssotokenBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	adminuserssotokenBeforeUpdateHooks = []AdminuserssotokenHook{}

	AddAdminuserssotokenHook(boil.AfterUpdateHook, adminuserssotokenAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	adminuserssotokenAfterUpdateHooks = []AdminuserssotokenHook{}

	AddAdminuserssotokenHook(boil.BeforeDeleteHook, adminuserssotokenBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	adminuserssotokenBeforeDeleteHooks = []AdminuserssotokenHook{}

	AddAdminuserssotokenHook(boil.AfterDeleteHook, adminuserssotokenAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	adminuserssotokenAfterDeleteHooks = []AdminuserssotokenHook{}

	AddAdminuserssotokenHook(boil.BeforeUpsertHook, adminuserssotokenBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	adminuserssotokenBeforeUpsertHooks = []AdminuserssotokenHook{}

	AddAdminuserssotokenHook(boil.AfterUpsertHook, adminuserssotokenAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	adminuserssotokenAfterUpsertHooks = []AdminuserssotokenHook{}
}

func testAdminuserssotokensInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuserssotoken{}
	if err = randomize.Struct(seed, o, adminuserssotokenDBTypes, true, adminuserssotokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Adminuserssotokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAdminuserssotokensInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuserssotoken{}
	if err = randomize.Struct(seed, o, adminuserssotokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(adminuserssotokenColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Adminuserssotokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAdminuserssotokensReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuserssotoken{}
	if err = randomize.Struct(seed, o, adminuserssotokenDBTypes, true, adminuserssotokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAdminuserssotokensReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuserssotoken{}
	if err = randomize.Struct(seed, o, adminuserssotokenDBTypes, true, adminuserssotokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AdminuserssotokenSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAdminuserssotokensSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Adminuserssotoken{}
	if err = randomize.Struct(seed, o, adminuserssotokenDBTypes, true, adminuserssotokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Adminuserssotokens().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	adminuserssotokenDBTypes = map[string]string{`ID`: `int`, `UserId`: `varchar`, `ClientId`: `varchar`, `Provider`: `varchar`, `AuthType`: `varchar`, `AccessToken`: `varchar`, `ExpiryDate`: `bigint`, `IdToken`: `varchar`, `RefreshToken`: `varchar`, `TokenType`: `varchar`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_                        = bytes.MinRead
)

func testAdminuserssotokensUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(adminuserssotokenPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(adminuserssotokenAllColumns) == len(adminuserssotokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Adminuserssotoken{}
	if err = randomize.Struct(seed, o, adminuserssotokenDBTypes, true, adminuserssotokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Adminuserssotokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, adminuserssotokenDBTypes, true, adminuserssotokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAdminuserssotokensSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(adminuserssotokenAllColumns) == len(adminuserssotokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Adminuserssotoken{}
	if err = randomize.Struct(seed, o, adminuserssotokenDBTypes, true, adminuserssotokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Adminuserssotokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, adminuserssotokenDBTypes, true, adminuserssotokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(adminuserssotokenAllColumns, adminuserssotokenPrimaryKeyColumns) {
		fields = adminuserssotokenAllColumns
	} else {
		fields = strmangle.SetComplement(
			adminuserssotokenAllColumns,
			adminuserssotokenPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AdminuserssotokenSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAdminuserssotokensUpsert(t *testing.T) {
	t.Parallel()

	if len(adminuserssotokenAllColumns) == len(adminuserssotokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAdminuserssotokenUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Adminuserssotoken{}
	if err = randomize.Struct(seed, &o, adminuserssotokenDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Adminuserssotoken: %s", err)
	}

	count, err := Adminuserssotokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, adminuserssotokenDBTypes, false, adminuserssotokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Adminuserssotoken struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Adminuserssotoken: %s", err)
	}

	count, err = Adminuserssotokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
