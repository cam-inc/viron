// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Adminusers", testAdminusers)
	t.Run("Auditlogs", testAuditlogs)
	t.Run("Revokedtokens", testRevokedtokens)
}

func TestDelete(t *testing.T) {
	t.Run("Adminusers", testAdminusersDelete)
	t.Run("Auditlogs", testAuditlogsDelete)
	t.Run("Revokedtokens", testRevokedtokensDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Adminusers", testAdminusersQueryDeleteAll)
	t.Run("Auditlogs", testAuditlogsQueryDeleteAll)
	t.Run("Revokedtokens", testRevokedtokensQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Adminusers", testAdminusersSliceDeleteAll)
	t.Run("Auditlogs", testAuditlogsSliceDeleteAll)
	t.Run("Revokedtokens", testRevokedtokensSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Adminusers", testAdminusersExists)
	t.Run("Auditlogs", testAuditlogsExists)
	t.Run("Revokedtokens", testRevokedtokensExists)
}

func TestFind(t *testing.T) {
	t.Run("Adminusers", testAdminusersFind)
	t.Run("Auditlogs", testAuditlogsFind)
	t.Run("Revokedtokens", testRevokedtokensFind)
}

func TestBind(t *testing.T) {
	t.Run("Adminusers", testAdminusersBind)
	t.Run("Auditlogs", testAuditlogsBind)
	t.Run("Revokedtokens", testRevokedtokensBind)
}

func TestOne(t *testing.T) {
	t.Run("Adminusers", testAdminusersOne)
	t.Run("Auditlogs", testAuditlogsOne)
	t.Run("Revokedtokens", testRevokedtokensOne)
}

func TestAll(t *testing.T) {
	t.Run("Adminusers", testAdminusersAll)
	t.Run("Auditlogs", testAuditlogsAll)
	t.Run("Revokedtokens", testRevokedtokensAll)
}

func TestCount(t *testing.T) {
	t.Run("Adminusers", testAdminusersCount)
	t.Run("Auditlogs", testAuditlogsCount)
	t.Run("Revokedtokens", testRevokedtokensCount)
}

func TestHooks(t *testing.T) {
	t.Run("Adminusers", testAdminusersHooks)
	t.Run("Auditlogs", testAuditlogsHooks)
	t.Run("Revokedtokens", testRevokedtokensHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Adminusers", testAdminusersInsert)
	t.Run("Adminusers", testAdminusersInsertWhitelist)
	t.Run("Auditlogs", testAuditlogsInsert)
	t.Run("Auditlogs", testAuditlogsInsertWhitelist)
	t.Run("Revokedtokens", testRevokedtokensInsert)
	t.Run("Revokedtokens", testRevokedtokensInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Adminusers", testAdminusersReload)
	t.Run("Auditlogs", testAuditlogsReload)
	t.Run("Revokedtokens", testRevokedtokensReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Adminusers", testAdminusersReloadAll)
	t.Run("Auditlogs", testAuditlogsReloadAll)
	t.Run("Revokedtokens", testRevokedtokensReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Adminusers", testAdminusersSelect)
	t.Run("Auditlogs", testAuditlogsSelect)
	t.Run("Revokedtokens", testRevokedtokensSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Adminusers", testAdminusersUpdate)
	t.Run("Auditlogs", testAuditlogsUpdate)
	t.Run("Revokedtokens", testRevokedtokensUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Adminusers", testAdminusersSliceUpdateAll)
	t.Run("Auditlogs", testAuditlogsSliceUpdateAll)
	t.Run("Revokedtokens", testRevokedtokensSliceUpdateAll)
}
