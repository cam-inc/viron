// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Adminuserssotoken is an object representing the database table.
type Adminuserssotoken struct {
	ID           uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserId       string      `boil:"userId" json:"userId" toml:"userId" yaml:"userId"`
	ClientId     string      `boil:"clientId" json:"clientId" toml:"clientId" yaml:"clientId"`
	Provider     string      `boil:"provider" json:"provider" toml:"provider" yaml:"provider"`
	AuthType     string      `boil:"authType" json:"authType" toml:"authType" yaml:"authType"`
	AccessToken  string      `boil:"accessToken" json:"accessToken" toml:"accessToken" yaml:"accessToken"`
	ExpiryDate   int64       `boil:"expiryDate" json:"expiryDate" toml:"expiryDate" yaml:"expiryDate"`
	IdToken      string      `boil:"idToken" json:"idToken" toml:"idToken" yaml:"idToken"`
	RefreshToken null.String `boil:"refreshToken" json:"refreshToken,omitempty" toml:"refreshToken" yaml:"refreshToken,omitempty"`
	TokenType    string      `boil:"tokenType" json:"tokenType" toml:"tokenType" yaml:"tokenType"`
	CreatedAt    time.Time   `boil:"createdAt" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt    time.Time   `boil:"updatedAt" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *adminuserssotokenR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L adminuserssotokenL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AdminuserssotokenColumns = struct {
	ID           string
	UserId       string
	ClientId     string
	Provider     string
	AuthType     string
	AccessToken  string
	ExpiryDate   string
	IdToken      string
	RefreshToken string
	TokenType    string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	UserId:       "userId",
	ClientId:     "clientId",
	Provider:     "provider",
	AuthType:     "authType",
	AccessToken:  "accessToken",
	ExpiryDate:   "expiryDate",
	IdToken:      "idToken",
	RefreshToken: "refreshToken",
	TokenType:    "tokenType",
	CreatedAt:    "createdAt",
	UpdatedAt:    "updatedAt",
}

var AdminuserssotokenTableColumns = struct {
	ID           string
	UserId       string
	ClientId     string
	Provider     string
	AuthType     string
	AccessToken  string
	ExpiryDate   string
	IdToken      string
	RefreshToken string
	TokenType    string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "adminuserssotokens.id",
	UserId:       "adminuserssotokens.userId",
	ClientId:     "adminuserssotokens.clientId",
	Provider:     "adminuserssotokens.provider",
	AuthType:     "adminuserssotokens.authType",
	AccessToken:  "adminuserssotokens.accessToken",
	ExpiryDate:   "adminuserssotokens.expiryDate",
	IdToken:      "adminuserssotokens.idToken",
	RefreshToken: "adminuserssotokens.refreshToken",
	TokenType:    "adminuserssotokens.tokenType",
	CreatedAt:    "adminuserssotokens.createdAt",
	UpdatedAt:    "adminuserssotokens.updatedAt",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AdminuserssotokenWhere = struct {
	ID           whereHelperuint
	UserId       whereHelperstring
	ClientId     whereHelperstring
	Provider     whereHelperstring
	AuthType     whereHelperstring
	AccessToken  whereHelperstring
	ExpiryDate   whereHelperint64
	IdToken      whereHelperstring
	RefreshToken whereHelpernull_String
	TokenType    whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	ID:           whereHelperuint{field: "`adminuserssotokens`.`id`"},
	UserId:       whereHelperstring{field: "`adminuserssotokens`.`userId`"},
	ClientId:     whereHelperstring{field: "`adminuserssotokens`.`clientId`"},
	Provider:     whereHelperstring{field: "`adminuserssotokens`.`provider`"},
	AuthType:     whereHelperstring{field: "`adminuserssotokens`.`authType`"},
	AccessToken:  whereHelperstring{field: "`adminuserssotokens`.`accessToken`"},
	ExpiryDate:   whereHelperint64{field: "`adminuserssotokens`.`expiryDate`"},
	IdToken:      whereHelperstring{field: "`adminuserssotokens`.`idToken`"},
	RefreshToken: whereHelpernull_String{field: "`adminuserssotokens`.`refreshToken`"},
	TokenType:    whereHelperstring{field: "`adminuserssotokens`.`tokenType`"},
	CreatedAt:    whereHelpertime_Time{field: "`adminuserssotokens`.`createdAt`"},
	UpdatedAt:    whereHelpertime_Time{field: "`adminuserssotokens`.`updatedAt`"},
}

// AdminuserssotokenRels is where relationship names are stored.
var AdminuserssotokenRels = struct {
}{}

// adminuserssotokenR is where relationships are stored.
type adminuserssotokenR struct {
}

// NewStruct creates a new relationship struct
func (*adminuserssotokenR) NewStruct() *adminuserssotokenR {
	return &adminuserssotokenR{}
}

// adminuserssotokenL is where Load methods for each relationship are stored.
type adminuserssotokenL struct{}

var (
	adminuserssotokenAllColumns            = []string{"id", "userId", "clientId", "provider", "authType", "accessToken", "expiryDate", "idToken", "refreshToken", "tokenType", "createdAt", "updatedAt"}
	adminuserssotokenColumnsWithoutDefault = []string{"userId", "clientId", "provider", "authType", "accessToken", "expiryDate", "idToken", "refreshToken", "tokenType", "createdAt", "updatedAt"}
	adminuserssotokenColumnsWithDefault    = []string{"id"}
	adminuserssotokenPrimaryKeyColumns     = []string{"id"}
	adminuserssotokenGeneratedColumns      = []string{}
)

type (
	// AdminuserssotokenSlice is an alias for a slice of pointers to Adminuserssotoken.
	// This should almost always be used instead of []Adminuserssotoken.
	AdminuserssotokenSlice []*Adminuserssotoken
	// AdminuserssotokenHook is the signature for custom Adminuserssotoken hook methods
	AdminuserssotokenHook func(context.Context, boil.ContextExecutor, *Adminuserssotoken) error

	adminuserssotokenQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	adminuserssotokenType                 = reflect.TypeOf(&Adminuserssotoken{})
	adminuserssotokenMapping              = queries.MakeStructMapping(adminuserssotokenType)
	adminuserssotokenPrimaryKeyMapping, _ = queries.BindMapping(adminuserssotokenType, adminuserssotokenMapping, adminuserssotokenPrimaryKeyColumns)
	adminuserssotokenInsertCacheMut       sync.RWMutex
	adminuserssotokenInsertCache          = make(map[string]insertCache)
	adminuserssotokenUpdateCacheMut       sync.RWMutex
	adminuserssotokenUpdateCache          = make(map[string]updateCache)
	adminuserssotokenUpsertCacheMut       sync.RWMutex
	adminuserssotokenUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var adminuserssotokenAfterSelectMu sync.Mutex
var adminuserssotokenAfterSelectHooks []AdminuserssotokenHook

var adminuserssotokenBeforeInsertMu sync.Mutex
var adminuserssotokenBeforeInsertHooks []AdminuserssotokenHook
var adminuserssotokenAfterInsertMu sync.Mutex
var adminuserssotokenAfterInsertHooks []AdminuserssotokenHook

var adminuserssotokenBeforeUpdateMu sync.Mutex
var adminuserssotokenBeforeUpdateHooks []AdminuserssotokenHook
var adminuserssotokenAfterUpdateMu sync.Mutex
var adminuserssotokenAfterUpdateHooks []AdminuserssotokenHook

var adminuserssotokenBeforeDeleteMu sync.Mutex
var adminuserssotokenBeforeDeleteHooks []AdminuserssotokenHook
var adminuserssotokenAfterDeleteMu sync.Mutex
var adminuserssotokenAfterDeleteHooks []AdminuserssotokenHook

var adminuserssotokenBeforeUpsertMu sync.Mutex
var adminuserssotokenBeforeUpsertHooks []AdminuserssotokenHook
var adminuserssotokenAfterUpsertMu sync.Mutex
var adminuserssotokenAfterUpsertHooks []AdminuserssotokenHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Adminuserssotoken) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminuserssotokenAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Adminuserssotoken) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminuserssotokenBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Adminuserssotoken) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminuserssotokenAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Adminuserssotoken) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminuserssotokenBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Adminuserssotoken) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminuserssotokenAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Adminuserssotoken) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminuserssotokenBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Adminuserssotoken) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminuserssotokenAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Adminuserssotoken) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminuserssotokenBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Adminuserssotoken) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminuserssotokenAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAdminuserssotokenHook registers your hook function for all future operations.
func AddAdminuserssotokenHook(hookPoint boil.HookPoint, adminuserssotokenHook AdminuserssotokenHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		adminuserssotokenAfterSelectMu.Lock()
		adminuserssotokenAfterSelectHooks = append(adminuserssotokenAfterSelectHooks, adminuserssotokenHook)
		adminuserssotokenAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		adminuserssotokenBeforeInsertMu.Lock()
		adminuserssotokenBeforeInsertHooks = append(adminuserssotokenBeforeInsertHooks, adminuserssotokenHook)
		adminuserssotokenBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		adminuserssotokenAfterInsertMu.Lock()
		adminuserssotokenAfterInsertHooks = append(adminuserssotokenAfterInsertHooks, adminuserssotokenHook)
		adminuserssotokenAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		adminuserssotokenBeforeUpdateMu.Lock()
		adminuserssotokenBeforeUpdateHooks = append(adminuserssotokenBeforeUpdateHooks, adminuserssotokenHook)
		adminuserssotokenBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		adminuserssotokenAfterUpdateMu.Lock()
		adminuserssotokenAfterUpdateHooks = append(adminuserssotokenAfterUpdateHooks, adminuserssotokenHook)
		adminuserssotokenAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		adminuserssotokenBeforeDeleteMu.Lock()
		adminuserssotokenBeforeDeleteHooks = append(adminuserssotokenBeforeDeleteHooks, adminuserssotokenHook)
		adminuserssotokenBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		adminuserssotokenAfterDeleteMu.Lock()
		adminuserssotokenAfterDeleteHooks = append(adminuserssotokenAfterDeleteHooks, adminuserssotokenHook)
		adminuserssotokenAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		adminuserssotokenBeforeUpsertMu.Lock()
		adminuserssotokenBeforeUpsertHooks = append(adminuserssotokenBeforeUpsertHooks, adminuserssotokenHook)
		adminuserssotokenBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		adminuserssotokenAfterUpsertMu.Lock()
		adminuserssotokenAfterUpsertHooks = append(adminuserssotokenAfterUpsertHooks, adminuserssotokenHook)
		adminuserssotokenAfterUpsertMu.Unlock()
	}
}

// One returns a single adminuserssotoken record from the query.
func (q adminuserssotokenQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Adminuserssotoken, error) {
	o := &Adminuserssotoken{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for adminuserssotokens")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Adminuserssotoken records from the query.
func (q adminuserssotokenQuery) All(ctx context.Context, exec boil.ContextExecutor) (AdminuserssotokenSlice, error) {
	var o []*Adminuserssotoken

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Adminuserssotoken slice")
	}

	if len(adminuserssotokenAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Adminuserssotoken records in the query.
func (q adminuserssotokenQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count adminuserssotokens rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q adminuserssotokenQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if adminuserssotokens exists")
	}

	return count > 0, nil
}

// Adminuserssotokens retrieves all the records using an executor.
func Adminuserssotokens(mods ...qm.QueryMod) adminuserssotokenQuery {
	mods = append(mods, qm.From("`adminuserssotokens`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`adminuserssotokens`.*"})
	}

	return adminuserssotokenQuery{q}
}

// FindAdminuserssotoken retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAdminuserssotoken(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*Adminuserssotoken, error) {
	adminuserssotokenObj := &Adminuserssotoken{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `adminuserssotokens` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, adminuserssotokenObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from adminuserssotokens")
	}

	if err = adminuserssotokenObj.doAfterSelectHooks(ctx, exec); err != nil {
		return adminuserssotokenObj, err
	}

	return adminuserssotokenObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Adminuserssotoken) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no adminuserssotokens provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(adminuserssotokenColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	adminuserssotokenInsertCacheMut.RLock()
	cache, cached := adminuserssotokenInsertCache[key]
	adminuserssotokenInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			adminuserssotokenAllColumns,
			adminuserssotokenColumnsWithDefault,
			adminuserssotokenColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(adminuserssotokenType, adminuserssotokenMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(adminuserssotokenType, adminuserssotokenMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `adminuserssotokens` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `adminuserssotokens` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `adminuserssotokens` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, adminuserssotokenPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into adminuserssotokens")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == adminuserssotokenMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for adminuserssotokens")
	}

CacheNoHooks:
	if !cached {
		adminuserssotokenInsertCacheMut.Lock()
		adminuserssotokenInsertCache[key] = cache
		adminuserssotokenInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Adminuserssotoken.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Adminuserssotoken) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	adminuserssotokenUpdateCacheMut.RLock()
	cache, cached := adminuserssotokenUpdateCache[key]
	adminuserssotokenUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			adminuserssotokenAllColumns,
			adminuserssotokenPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update adminuserssotokens, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `adminuserssotokens` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, adminuserssotokenPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(adminuserssotokenType, adminuserssotokenMapping, append(wl, adminuserssotokenPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update adminuserssotokens row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for adminuserssotokens")
	}

	if !cached {
		adminuserssotokenUpdateCacheMut.Lock()
		adminuserssotokenUpdateCache[key] = cache
		adminuserssotokenUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q adminuserssotokenQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for adminuserssotokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for adminuserssotokens")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AdminuserssotokenSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminuserssotokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `adminuserssotokens` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, adminuserssotokenPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in adminuserssotoken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all adminuserssotoken")
	}
	return rowsAff, nil
}

var mySQLAdminuserssotokenUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Adminuserssotoken) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no adminuserssotokens provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(adminuserssotokenColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAdminuserssotokenUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	adminuserssotokenUpsertCacheMut.RLock()
	cache, cached := adminuserssotokenUpsertCache[key]
	adminuserssotokenUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			adminuserssotokenAllColumns,
			adminuserssotokenColumnsWithDefault,
			adminuserssotokenColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			adminuserssotokenAllColumns,
			adminuserssotokenPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert adminuserssotokens, could not build update column list")
		}

		ret := strmangle.SetComplement(adminuserssotokenAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`adminuserssotokens`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `adminuserssotokens` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(adminuserssotokenType, adminuserssotokenMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(adminuserssotokenType, adminuserssotokenMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for adminuserssotokens")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == adminuserssotokenMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(adminuserssotokenType, adminuserssotokenMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for adminuserssotokens")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for adminuserssotokens")
	}

CacheNoHooks:
	if !cached {
		adminuserssotokenUpsertCacheMut.Lock()
		adminuserssotokenUpsertCache[key] = cache
		adminuserssotokenUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Adminuserssotoken record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Adminuserssotoken) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Adminuserssotoken provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), adminuserssotokenPrimaryKeyMapping)
	sql := "DELETE FROM `adminuserssotokens` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from adminuserssotokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for adminuserssotokens")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q adminuserssotokenQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no adminuserssotokenQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from adminuserssotokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for adminuserssotokens")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AdminuserssotokenSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(adminuserssotokenBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminuserssotokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `adminuserssotokens` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, adminuserssotokenPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from adminuserssotoken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for adminuserssotokens")
	}

	if len(adminuserssotokenAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Adminuserssotoken) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAdminuserssotoken(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AdminuserssotokenSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AdminuserssotokenSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminuserssotokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `adminuserssotokens`.* FROM `adminuserssotokens` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, adminuserssotokenPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AdminuserssotokenSlice")
	}

	*o = slice

	return nil
}

// AdminuserssotokenExists checks if the Adminuserssotoken row exists.
func AdminuserssotokenExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `adminuserssotokens` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if adminuserssotokens exists")
	}

	return exists, nil
}

// Exists checks if the Adminuserssotoken row exists.
func (o *Adminuserssotoken) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AdminuserssotokenExists(ctx, exec, o.ID)
}
