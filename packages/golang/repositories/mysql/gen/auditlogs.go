// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Auditlog is an object representing the database table.
type Auditlog struct {
	ID            uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	RequestMethod null.String `boil:"requestMethod" json:"requestMethod,omitempty" toml:"requestMethod" yaml:"requestMethod,omitempty"`
	RequestUri    null.String `boil:"requestUri" json:"requestUri,omitempty" toml:"requestUri" yaml:"requestUri,omitempty"`
	SourceIp      null.String `boil:"sourceIp" json:"sourceIp,omitempty" toml:"sourceIp" yaml:"sourceIp,omitempty"`
	UserId        null.String `boil:"userId" json:"userId,omitempty" toml:"userId" yaml:"userId,omitempty"`
	RequestBody   null.String `boil:"requestBody" json:"requestBody,omitempty" toml:"requestBody" yaml:"requestBody,omitempty"`
	StatusCode    null.Uint   `boil:"statusCode" json:"statusCode,omitempty" toml:"statusCode" yaml:"statusCode,omitempty"`
	CreatedAt     time.Time   `boil:"createdAt" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt     time.Time   `boil:"updatedAt" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *auditlogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L auditlogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuditlogColumns = struct {
	ID            string
	RequestMethod string
	RequestUri    string
	SourceIp      string
	UserId        string
	RequestBody   string
	StatusCode    string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	RequestMethod: "requestMethod",
	RequestUri:    "requestUri",
	SourceIp:      "sourceIp",
	UserId:        "userId",
	RequestBody:   "requestBody",
	StatusCode:    "statusCode",
	CreatedAt:     "createdAt",
	UpdatedAt:     "updatedAt",
}

var AuditlogTableColumns = struct {
	ID            string
	RequestMethod string
	RequestUri    string
	SourceIp      string
	UserId        string
	RequestBody   string
	StatusCode    string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "auditlogs.id",
	RequestMethod: "auditlogs.requestMethod",
	RequestUri:    "auditlogs.requestUri",
	SourceIp:      "auditlogs.sourceIp",
	UserId:        "auditlogs.userId",
	RequestBody:   "auditlogs.requestBody",
	StatusCode:    "auditlogs.statusCode",
	CreatedAt:     "auditlogs.createdAt",
	UpdatedAt:     "auditlogs.updatedAt",
}

// Generated where

type whereHelpernull_Uint struct{ field string }

func (w whereHelpernull_Uint) EQ(x null.Uint) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Uint) NEQ(x null.Uint) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Uint) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Uint) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Uint) LT(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Uint) LTE(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Uint) GT(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Uint) GTE(x null.Uint) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AuditlogWhere = struct {
	ID            whereHelperuint
	RequestMethod whereHelpernull_String
	RequestUri    whereHelpernull_String
	SourceIp      whereHelpernull_String
	UserId        whereHelpernull_String
	RequestBody   whereHelpernull_String
	StatusCode    whereHelpernull_Uint
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	ID:            whereHelperuint{field: "`auditlogs`.`id`"},
	RequestMethod: whereHelpernull_String{field: "`auditlogs`.`requestMethod`"},
	RequestUri:    whereHelpernull_String{field: "`auditlogs`.`requestUri`"},
	SourceIp:      whereHelpernull_String{field: "`auditlogs`.`sourceIp`"},
	UserId:        whereHelpernull_String{field: "`auditlogs`.`userId`"},
	RequestBody:   whereHelpernull_String{field: "`auditlogs`.`requestBody`"},
	StatusCode:    whereHelpernull_Uint{field: "`auditlogs`.`statusCode`"},
	CreatedAt:     whereHelpertime_Time{field: "`auditlogs`.`createdAt`"},
	UpdatedAt:     whereHelpertime_Time{field: "`auditlogs`.`updatedAt`"},
}

// AuditlogRels is where relationship names are stored.
var AuditlogRels = struct {
}{}

// auditlogR is where relationships are stored.
type auditlogR struct {
}

// NewStruct creates a new relationship struct
func (*auditlogR) NewStruct() *auditlogR {
	return &auditlogR{}
}

// auditlogL is where Load methods for each relationship are stored.
type auditlogL struct{}

var (
	auditlogAllColumns            = []string{"id", "requestMethod", "requestUri", "sourceIp", "userId", "requestBody", "statusCode", "createdAt", "updatedAt"}
	auditlogColumnsWithoutDefault = []string{"requestMethod", "requestUri", "sourceIp", "userId", "requestBody", "statusCode", "createdAt", "updatedAt"}
	auditlogColumnsWithDefault    = []string{"id"}
	auditlogPrimaryKeyColumns     = []string{"id"}
)

type (
	// AuditlogSlice is an alias for a slice of pointers to Auditlog.
	// This should almost always be used instead of []Auditlog.
	AuditlogSlice []*Auditlog
	// AuditlogHook is the signature for custom Auditlog hook methods
	AuditlogHook func(context.Context, boil.ContextExecutor, *Auditlog) error

	auditlogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	auditlogType                 = reflect.TypeOf(&Auditlog{})
	auditlogMapping              = queries.MakeStructMapping(auditlogType)
	auditlogPrimaryKeyMapping, _ = queries.BindMapping(auditlogType, auditlogMapping, auditlogPrimaryKeyColumns)
	auditlogInsertCacheMut       sync.RWMutex
	auditlogInsertCache          = make(map[string]insertCache)
	auditlogUpdateCacheMut       sync.RWMutex
	auditlogUpdateCache          = make(map[string]updateCache)
	auditlogUpsertCacheMut       sync.RWMutex
	auditlogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var auditlogBeforeInsertHooks []AuditlogHook
var auditlogBeforeUpdateHooks []AuditlogHook
var auditlogBeforeDeleteHooks []AuditlogHook
var auditlogBeforeUpsertHooks []AuditlogHook

var auditlogAfterInsertHooks []AuditlogHook
var auditlogAfterSelectHooks []AuditlogHook
var auditlogAfterUpdateHooks []AuditlogHook
var auditlogAfterDeleteHooks []AuditlogHook
var auditlogAfterUpsertHooks []AuditlogHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Auditlog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auditlogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Auditlog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auditlogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Auditlog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auditlogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Auditlog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auditlogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Auditlog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auditlogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Auditlog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auditlogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Auditlog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auditlogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Auditlog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auditlogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Auditlog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auditlogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuditlogHook registers your hook function for all future operations.
func AddAuditlogHook(hookPoint boil.HookPoint, auditlogHook AuditlogHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		auditlogBeforeInsertHooks = append(auditlogBeforeInsertHooks, auditlogHook)
	case boil.BeforeUpdateHook:
		auditlogBeforeUpdateHooks = append(auditlogBeforeUpdateHooks, auditlogHook)
	case boil.BeforeDeleteHook:
		auditlogBeforeDeleteHooks = append(auditlogBeforeDeleteHooks, auditlogHook)
	case boil.BeforeUpsertHook:
		auditlogBeforeUpsertHooks = append(auditlogBeforeUpsertHooks, auditlogHook)
	case boil.AfterInsertHook:
		auditlogAfterInsertHooks = append(auditlogAfterInsertHooks, auditlogHook)
	case boil.AfterSelectHook:
		auditlogAfterSelectHooks = append(auditlogAfterSelectHooks, auditlogHook)
	case boil.AfterUpdateHook:
		auditlogAfterUpdateHooks = append(auditlogAfterUpdateHooks, auditlogHook)
	case boil.AfterDeleteHook:
		auditlogAfterDeleteHooks = append(auditlogAfterDeleteHooks, auditlogHook)
	case boil.AfterUpsertHook:
		auditlogAfterUpsertHooks = append(auditlogAfterUpsertHooks, auditlogHook)
	}
}

// One returns a single auditlog record from the query.
func (q auditlogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Auditlog, error) {
	o := &Auditlog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auditlogs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Auditlog records from the query.
func (q auditlogQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuditlogSlice, error) {
	var o []*Auditlog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Auditlog slice")
	}

	if len(auditlogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Auditlog records in the query.
func (q auditlogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auditlogs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q auditlogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auditlogs exists")
	}

	return count > 0, nil
}

// Auditlogs retrieves all the records using an executor.
func Auditlogs(mods ...qm.QueryMod) auditlogQuery {
	mods = append(mods, qm.From("`auditlogs`"))
	return auditlogQuery{NewQuery(mods...)}
}

// FindAuditlog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuditlog(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*Auditlog, error) {
	auditlogObj := &Auditlog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `auditlogs` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, auditlogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auditlogs")
	}

	if err = auditlogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return auditlogObj, err
	}

	return auditlogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Auditlog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auditlogs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(auditlogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	auditlogInsertCacheMut.RLock()
	cache, cached := auditlogInsertCache[key]
	auditlogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			auditlogAllColumns,
			auditlogColumnsWithDefault,
			auditlogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(auditlogType, auditlogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(auditlogType, auditlogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `auditlogs` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `auditlogs` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `auditlogs` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, auditlogPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auditlogs")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == auditlogMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for auditlogs")
	}

CacheNoHooks:
	if !cached {
		auditlogInsertCacheMut.Lock()
		auditlogInsertCache[key] = cache
		auditlogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Auditlog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Auditlog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	auditlogUpdateCacheMut.RLock()
	cache, cached := auditlogUpdateCache[key]
	auditlogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			auditlogAllColumns,
			auditlogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auditlogs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `auditlogs` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, auditlogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(auditlogType, auditlogMapping, append(wl, auditlogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auditlogs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auditlogs")
	}

	if !cached {
		auditlogUpdateCacheMut.Lock()
		auditlogUpdateCache[key] = cache
		auditlogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q auditlogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auditlogs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auditlogs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuditlogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auditlogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `auditlogs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, auditlogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in auditlog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all auditlog")
	}
	return rowsAff, nil
}

var mySQLAuditlogUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Auditlog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auditlogs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(auditlogColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAuditlogUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	auditlogUpsertCacheMut.RLock()
	cache, cached := auditlogUpsertCache[key]
	auditlogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			auditlogAllColumns,
			auditlogColumnsWithDefault,
			auditlogColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			auditlogAllColumns,
			auditlogPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert auditlogs, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`auditlogs`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `auditlogs` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(auditlogType, auditlogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(auditlogType, auditlogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for auditlogs")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == auditlogMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(auditlogType, auditlogMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for auditlogs")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for auditlogs")
	}

CacheNoHooks:
	if !cached {
		auditlogUpsertCacheMut.Lock()
		auditlogUpsertCache[key] = cache
		auditlogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Auditlog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Auditlog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Auditlog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), auditlogPrimaryKeyMapping)
	sql := "DELETE FROM `auditlogs` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auditlogs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auditlogs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q auditlogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no auditlogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auditlogs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auditlogs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuditlogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(auditlogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auditlogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `auditlogs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, auditlogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auditlog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auditlogs")
	}

	if len(auditlogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Auditlog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuditlog(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuditlogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuditlogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auditlogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `auditlogs`.* FROM `auditlogs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, auditlogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuditlogSlice")
	}

	*o = slice

	return nil
}

// AuditlogExists checks if the Auditlog row exists.
func AuditlogExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `auditlogs` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auditlogs exists")
	}

	return exists, nil
}
