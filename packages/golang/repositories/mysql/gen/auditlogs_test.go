// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAuditlogs(t *testing.T) {
	t.Parallel()

	query := Auditlogs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAuditlogsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Auditlog{}
	if err = randomize.Struct(seed, o, auditlogDBTypes, true, auditlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Auditlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuditlogsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Auditlog{}
	if err = randomize.Struct(seed, o, auditlogDBTypes, true, auditlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Auditlogs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Auditlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuditlogsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Auditlog{}
	if err = randomize.Struct(seed, o, auditlogDBTypes, true, auditlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuditlogSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Auditlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuditlogsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Auditlog{}
	if err = randomize.Struct(seed, o, auditlogDBTypes, true, auditlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AuditlogExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Auditlog exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AuditlogExists to return true, but got false.")
	}
}

func testAuditlogsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Auditlog{}
	if err = randomize.Struct(seed, o, auditlogDBTypes, true, auditlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	auditlogFound, err := FindAuditlog(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if auditlogFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAuditlogsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Auditlog{}
	if err = randomize.Struct(seed, o, auditlogDBTypes, true, auditlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Auditlogs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAuditlogsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Auditlog{}
	if err = randomize.Struct(seed, o, auditlogDBTypes, true, auditlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Auditlogs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAuditlogsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	auditlogOne := &Auditlog{}
	auditlogTwo := &Auditlog{}
	if err = randomize.Struct(seed, auditlogOne, auditlogDBTypes, false, auditlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}
	if err = randomize.Struct(seed, auditlogTwo, auditlogDBTypes, false, auditlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = auditlogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = auditlogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Auditlogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAuditlogsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	auditlogOne := &Auditlog{}
	auditlogTwo := &Auditlog{}
	if err = randomize.Struct(seed, auditlogOne, auditlogDBTypes, false, auditlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}
	if err = randomize.Struct(seed, auditlogTwo, auditlogDBTypes, false, auditlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = auditlogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = auditlogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Auditlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func auditlogBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Auditlog) error {
	*o = Auditlog{}
	return nil
}

func auditlogAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Auditlog) error {
	*o = Auditlog{}
	return nil
}

func auditlogAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Auditlog) error {
	*o = Auditlog{}
	return nil
}

func auditlogBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Auditlog) error {
	*o = Auditlog{}
	return nil
}

func auditlogAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Auditlog) error {
	*o = Auditlog{}
	return nil
}

func auditlogBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Auditlog) error {
	*o = Auditlog{}
	return nil
}

func auditlogAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Auditlog) error {
	*o = Auditlog{}
	return nil
}

func auditlogBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Auditlog) error {
	*o = Auditlog{}
	return nil
}

func auditlogAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Auditlog) error {
	*o = Auditlog{}
	return nil
}

func testAuditlogsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Auditlog{}
	o := &Auditlog{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, auditlogDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Auditlog object: %s", err)
	}

	AddAuditlogHook(boil.BeforeInsertHook, auditlogBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	auditlogBeforeInsertHooks = []AuditlogHook{}

	AddAuditlogHook(boil.AfterInsertHook, auditlogAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	auditlogAfterInsertHooks = []AuditlogHook{}

	AddAuditlogHook(boil.AfterSelectHook, auditlogAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	auditlogAfterSelectHooks = []AuditlogHook{}

	AddAuditlogHook(boil.BeforeUpdateHook, auditlogBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	auditlogBeforeUpdateHooks = []AuditlogHook{}

	AddAuditlogHook(boil.AfterUpdateHook, auditlogAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	auditlogAfterUpdateHooks = []AuditlogHook{}

	AddAuditlogHook(boil.BeforeDeleteHook, auditlogBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	auditlogBeforeDeleteHooks = []AuditlogHook{}

	AddAuditlogHook(boil.AfterDeleteHook, auditlogAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	auditlogAfterDeleteHooks = []AuditlogHook{}

	AddAuditlogHook(boil.BeforeUpsertHook, auditlogBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	auditlogBeforeUpsertHooks = []AuditlogHook{}

	AddAuditlogHook(boil.AfterUpsertHook, auditlogAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	auditlogAfterUpsertHooks = []AuditlogHook{}
}

func testAuditlogsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Auditlog{}
	if err = randomize.Struct(seed, o, auditlogDBTypes, true, auditlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Auditlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuditlogsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Auditlog{}
	if err = randomize.Struct(seed, o, auditlogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(auditlogColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Auditlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuditlogsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Auditlog{}
	if err = randomize.Struct(seed, o, auditlogDBTypes, true, auditlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuditlogsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Auditlog{}
	if err = randomize.Struct(seed, o, auditlogDBTypes, true, auditlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuditlogSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuditlogsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Auditlog{}
	if err = randomize.Struct(seed, o, auditlogDBTypes, true, auditlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Auditlogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	auditlogDBTypes = map[string]string{`ID`: `int`, `RequestMethod`: `varchar`, `RequestUri`: `varchar`, `SourceIp`: `varchar`, `UserId`: `varchar`, `RequestBody`: `text`, `StatusCode`: `int`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_               = bytes.MinRead
)

func testAuditlogsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(auditlogPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(auditlogAllColumns) == len(auditlogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Auditlog{}
	if err = randomize.Struct(seed, o, auditlogDBTypes, true, auditlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Auditlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, auditlogDBTypes, true, auditlogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAuditlogsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(auditlogAllColumns) == len(auditlogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Auditlog{}
	if err = randomize.Struct(seed, o, auditlogDBTypes, true, auditlogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Auditlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, auditlogDBTypes, true, auditlogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(auditlogAllColumns, auditlogPrimaryKeyColumns) {
		fields = auditlogAllColumns
	} else {
		fields = strmangle.SetComplement(
			auditlogAllColumns,
			auditlogPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AuditlogSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAuditlogsUpsert(t *testing.T) {
	t.Parallel()

	if len(auditlogAllColumns) == len(auditlogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAuditlogUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Auditlog{}
	if err = randomize.Struct(seed, &o, auditlogDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Auditlog: %s", err)
	}

	count, err := Auditlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, auditlogDBTypes, false, auditlogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Auditlog struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Auditlog: %s", err)
	}

	count, err = Auditlogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
