#################################################
# OpenAPI Specification Version2.0.0
# @see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md
#################################################
swagger: "2.0"

#################################################
# host
# - APIを提供するホスト
#################################################
host: localhost:3000

#################################################
# info
# - API全般のメタ情報を記載
#################################################
info:
  title: DMC example for Node.js
  description: Design-based Management Console.
  version: 0.0.1

#################################################
# schemes
# - APIを提供する通信プロトコルのリスト
#################################################
schemes:
- https

#################################################
# definitions
# - リクエストやレスポンスのレイアウトの定義
# - paths内から $ref で参照できる
#################################################
definitions:
  AdminRole:
    description: A Admin Role
    example:
      paths:
      - allow: true
        path: GET:/user
      role_id: operator
    properties:
      paths:
        description: target path
        example:
        - allow: true
          path: GET:/user
        items:
          $ref: '#/definitions/adminrolepath'
        type: array
      role_id:
        description: role id
        example: operator
        type: string
    required:
    - role_id
    - paths
    type: object

  AdminRoleCollection:
    description: AdminRoleCollection is the media type for an array of AdminRole
    example:
    - paths:
      - allow: true
        path: GET:/user
      role_id: operator
    items:
      $ref: '#/definitions/AdminRole'
    type: array

  AdminUser:
    description: A Admin User
    example:
      email: test@dmc.com
      id: 1
      role_id: operator
    properties:
      email:
        description: login id
        example: test@dmc.com
        type: string
      id:
        description: unique id
        example: 1
        format: int64
        type: integer
      role_id:
        description: role id
        example: operator
        type: string
    required:
    - id
    - email
    type: object

  AdminUserCollection:
    description: AdminUserCollection is the media type for an array of AdminUser
    example:
    - email: test@dmc.com
      id: 1
      role_id: operator
    items:
      $ref: '#/definitions/AdminUser'
    type: array

  AuditLog:
    description: A Audit Log
    example:
      createdAt: 2006-02-12T07:09:13+09:00
      request_body: '{"name":"test", "id":1}'
      request_method: GET
      request_uri: '/user'
      source_ip: 200.200.200.200
      status_code: 200
      user_id: test@dmc.com
    properties:
      createdAt:
        description: created time
        example: 2006-02-12T07:09:13+09:00
        format: date-time
        type: string
      request_body:
        description: request body
        example: '{"name":"test", "id":1}'
        type: string
      request_method:
        description: http request method
        example: GET
        type: string
      request_uri:
        description: request uri
        example: /user
        type: string
      source_ip:
        description: source ip address
        example: 200.200.200.200
        type: string
      status_code:
        description: http status code
        example: 200
        type: integer
      user_id:
        description: user id
        example: Et saepe nihil in earum sint.
        type: string
    type: object

  AuditLogCollection:
    description: AuditLogCollection is the media type for an array of AuditLog
    example:
    - createdAt: 2006-02-12T07:09:13+09:00
      request_body: '{"name":"test", "id":1}'
      request_method: GET
      request_uri: '/user'
      source_ip: 200.200.200.200
      status_code: 200
      user_id: test@dmc.com
    items:
      $ref: '#/definitions/AuditLog'
    type: array

  AuthType:
    description: A Auth Type
    example:
      method: POST
      provider: google
      type: oauth
      url: '/googlesignin'
    properties:
      method:
        description: request method
        example: POST
        type: string
      provider:
        description: auth provider
        example: google
        type: string
      type:
        description: auth type
        example: oauth
        type: string
      url:
        description: request url
        example: '/googlesignin'
        type: string
    required:
    - type
    - url
    - method
    - provider
    type: object

  AuthTypeCollection:
    description: AuthTypeCollection is the media type for an array of AuthType
    example:
    - method: POST
      provider: google
      type: oauth
      url: '/googlesignin'
    items:
      $ref: '#/definitions/AuthType'
    type: array

  BlogDesign:
    description: A BlogDesign Master
    example:
      background_image: http://hoge.com/a.png
      base_color: blue
      createdAt: 1990-04-23T00:18:19+09:00
      deletedAt: 1999-04-23T00:18:19+09:00
      id: des_001
      name: design name
      updatedAt: 1971-03-24T08:40:07+09:00
    properties:
      background_image:
        description: 背景画像
        example: http://hoge.com/a.png
        type: string
      base_color:
        description: ベースカラー
        example: blue
        type: string
      createdAt:
        description: 作成日時
        example: 1990-04-23T00:18:19+09:00
        format: date-time
        type: string
      deletedAt:
        description: 削除日時
        example: 1999-04-23T00:18:19+09:00
        format: date-time
        type: string
      id:
        description: デザインID
        example: des_001
        type: string
      name:
        description: 名前
        example: design name
        type: string
      updatedAt:
        description: 更新日時
        example: 1971-03-24T08:40:07+09:00
        format: date-time
        type: string
    required:
    - name
    type: object

  BlogDesignCollection:
    description: BlogDesignCollection is the media type for an array of BlogDesign
    example:
    - background_image: http://hoge.com/a.png
      base_color: blue
      createdAt: 1990-04-23T00:18:19+09:00
      deletedAt: 1999-04-23T00:18:19+09:00
      id: des_001
      name: design name
      updatedAt: 1971-03-24T08:40:07+09:00
    items:
      $ref: '#/definitions/BlogDesign'
    type: array

  BlogDesignPayload:
    example:
      background_image: http://hoge.com/a.png
      base_color: blue
      id: des_001
      name: design name
    properties:
      background_image:
        description: 背景画像
        example: http://hoge.com/a.png
        type: string
      base_color:
        description: ベースカラー
        example: blue
        type: string
      id:
        description: デザインID
        example: des_001
        type: string
      name:
        description: 名前
        example: design name
        type: string
    required:
    - id
    - name
    - base_color
    type: object

  CreateAdminRolePayload:
    example:
      paths:
      - allow: true
        path: GET:/user
      - allow: true
        path: GET:/user
      role_id: operator
    properties:
      paths:
        description: target path
        example:
        - allow: true
          path: GET:/user
        - allow: true
          path: GET:/user
        items:
          $ref: '#/definitions/adminrolepath'
        type: array
      role_id:
        description: role id
        example: operator
        type: string
    type: object

  CreateAdminUserPayload:
    example:
      email: user@sample.com
      password: XXXXXXXXXXXXXXXX
    properties:
      email:
        description: login user mail address
        example: user@sample.com
        type: string
      password:
        description: password for email auth
        example: XXXXXXXXXXXXXXXX
        type: string
    required:
    - email
    - password
    type: object

  Dmc:
    description: A DMC settings data
    example:
      color: white
      name: DMC Example Project for Node.js
      pages:
      - components:
        - api:
            method: get
            path: /stats/dau
          name: DAU
          options:
          - key: key
            value: value
          pagination: true
          query:
          - key: key
            type: string
          style: number
          table_labels:
          - name
        group: empty
        id: quickview
        name: クイックビュー
        section: dashboard
      tags:
      - dmc
      - example
      thumbnail: Iure nisi.
    properties:
      color:
        default: white
        enum:
        - white
        - black
        - perple
        example: white
        type: string
      name:
        description: Name pattern
        example: DMC Example Project for Node.js
        type: string
      pages:
        description: A Pages format
        example:
        - components:
          - api:
              method: get
              path: /stats/dau
            name: DAU
            options:
            - key: key
              value: value
            pagination: true
            query:
            - key: key
              type: string
            style: number
            table_labels:
            - name
          group: empty
          id: quickview
          name: クイックビュー
          section: dashboard
        items:
          $ref: '#/definitions/page'
        type: array
      tags:
        description: tags
        example:
        - dmc
        items:
          example: dmc
          type: string
        type: array
      thumbnail:
        description: thumbnail of endpoint
        example: https://dmc.com/thumbnail.png
        type: string
    required:
    - name
    - color
    - thumbnail
    - tags
    - pages
    type: object

  SigninAuthPayload:
    example:
      email: user1@dmc.com
      password: XXXXXXXXXXXX
    properties:
      email:
        example: user1@dmc.com
        type: string
      password:
        example: XXXXXXXXXXXX
        type: string
    type: object

  StatsGuideType:
    example:
      x:
        label: x-label
      y:
        label: y-label
    properties:
      x:
        $ref: '#/definitions/StatsLabelType'
      y:
        $ref: '#/definitions/StatsLabelType'
    type: object

  StatsLabelType:
    example:
      label: yyyymmdd
    properties:
      label:
        example: yyyymmdd
        type: string
    required:
    - label
    type: object

  Statsdau:
    description: A DAU data
    example:
      value: 12345678
    properties:
      value:
        description: DAU of Stats
        example: 12345678
        format: int64
        type: integer
    required:
    - value
    type: object

  Statsmau:
    description: A MAU data
    example:
      value: 98765432
    properties:
      value:
        description: MAU of Stats
        example: 98765432
        format: int64
        type: integer
    required:
    - value
    type: object

  Statsplanet:
    description: Planets data
    example:
      color: blue
      data:
      - name: example-name
        distance: 11111
      guide:
        x:
          label: distance
        y:
          label: name
      size: temperature
      x: name
      y: distance
    properties:
      color:
        description: ドットの色分けに使用するkey
        example: blue
        type: string
      data:
        description: グラフデータ
        example:
        - name: example-name
          distance: 11111
        items:
          additionalProperties: true
          example:
            name: example-name
            distance: 11111
          type: object
        type: array
      guide:
        $ref: '#/definitions/StatsGuideType'
      size:
        description: ドットの大きさに使用するkey
        example: temperature
        type: string
      x:
        description: X軸に使用するkey
        example: name
        type: string
      y:
        description: Y軸に使用するkey
        example: distance
        type: string
    required:
    - data
    - x
    - y
    type: object

  UpdateAdminRolePayload:
    example:
      paths:
      - allow: true
        path: GET:/user
    properties:
      paths:
        description: target path
        example:
        - allow: true
          path: GET:/user
        items:
          $ref: '#/definitions/adminrolepath'
        type: array
    type: object

  UpdateAdminUserPayload:
    example:
      password: XXXXXXXXXXXXXXXX
      role_id: viewer
    properties:
      password:
        description: password for email auth
        example: XXXXXXXXXXXXXXXX
        type: string
      role_id:
        description: admin role id
        example: viewer
        type: string
        enum:
        - AutoGenerate
    required:
    - role_id
    type: object

  User:
    description: A User
    example:
      birthday: 1995-05-12T09:45:56Z
      blood_type: A
      createdAt: 2010-04-14T11:16:32+09:00
      deletedAt: 2014-04-27T12:25:11+09:00
      id: 1
      job: 大学生
      name: 山田 太郎
      sex: male
      updatedAt: 1994-04-27T12:25:11+09:00
    properties:
      birthday:
        description: 誕生日
        example: 1995-05-12T09:45:56Z
        format: date-time
        type: string
      blood_type:
        description: 血液型
        enum:
        - A
        - B
        - O
        - AB
        example: A
        type: string
      createdAt:
        description: 作成日時
        example: 2010-04-14T11:16:32+09:00
        format: date-time
        type: string
      deletedAt:
        description: 削除日時
        example: 2014-04-27T12:25:11+09:00
        format: date-time
        type: string
      id:
        description: ユーザーID
        example: 1
        format: int64
        type: integer
      job:
        description: 職業
        example: 大学生
        type: string
      name:
        description: 名前
        example: 山田 太郎
        type: string
      sex:
        description: 性別
        enum:
        - male
        - female
        example: male
        type: string
      updatedAt:
        description: 更新日時
        example: 1994-04-27T12:25:11+09:00
        format: date-time
        type: string
    required:
    - id
    - name
    type: object

  UserBlog:
    description: A User Blog
    example:
      created_at: 1993-07-26T02:54:17+09:00
      design_id: simple
      genre: game
      id: 11
      sub_title: diary
      title: user's blog
      updated_at: 1979-11-12T02:46:55+09:00
      user_id: 1
    properties:
      createdAt:
        description: 作成日時
        example: 1993-07-26T02:54:17+09:00
        format: date-time
        type: string
      deletedAt:
        description: 削除日時
        example: 1999-11-12T02:46:55+09:00
        format: date-time
        type: string
      design_id:
        description: デザインID
        enum:
        - simple
        - tile
        - 2column
        - 3column
        example: simple
        type: string
      genre:
        description: ジャンル
        example: game
        type: string
      id:
        description: ユーザーブログID
        example: 11
        format: int64
        type: integer
      sub_title:
        description: サブタイトル
        example: diary
        type: string
      title:
        description: タイトル
        example: user's blog
        type: string
      updatedAt:
        description: 更新日時
        example: 1979-11-12T02:46:55+09:00
        format: date-time
        type: string
      user_id:
        description: ユーザーID
        example: 1
        format: int64
        type: integer
    required:
    - id
    - user_id
    - title
    - design_id
    type: object

  UserBlogEntry:
    description: A User Blog Entry
    example:
      content: Velit iure doloribus.
      createdAt: 1991-02-16T10:17:41+09:00
      deletedAt: 2005-10-21T03:42:51+09:00
      id: 111
      theme: diary
      title: 今日の日記
      updatedAt: 2003-10-21T03:42:51+09:00
      user_blog_id: 11
    properties:
      content:
        description: 内容
        example: Velit iure doloribus.
        type: string
      createdAt:
        description: 作成日時
        example: 1991-02-16T10:17:41+09:00
        format: date-time
        type: string
      deletedAt:
        description: 削除日時
        example: 2005-02-16T10:17:41+09:00
        format: date-time
        type: string
      id:
        description: ユーザーブログ記事ID
        example: 111
        format: int64
        type: integer
      theme:
        description: テーマ
        example: diary
        type: string
      title:
        description: タイトル
        example: 今日の日記
        type: string
      updatedAt:
        description: 更新日時
        example: 2003-10-21T03:42:51+09:00
        format: date-time
        type: string
      user_blog_id:
        description: ユーザーブログID
        example: 11
        format: int64
        type: integer
    required:
    - id
    - user_blog_id
    - title
    - content
    type: object

  UserBlogEntryCollection:
    description: UserBlogEntryCollection is the media type for an array of UserBlogEntry
    example:
    - content: Velit iure doloribus.
      createdAt: 1991-02-16T10:17:41+09:00
      deletedAt: 2005-10-21T03:42:51+09:00
      id: 111
      theme: diary
      title: 今日の日記
      updatedAt: 2003-10-21T03:42:51+09:00
      user_blog_id: 11
    items:
      $ref: '#/definitions/UserBlogEntry'
    type: array

  UserBlogCollection:
    description: UserBlogCollection is the media type for an array of UserBlog
    example:
    - createdAt: 1993-07-26T02:54:17+09:00
      deletedAt: 1999-07-26T02:54:17+09:00
      design_id: simple
      genre: game
      id: 11
      sub_title: diary
      title: user's blog
      updatedAt: 1979-11-12T02:46:55+09:00
      user_id: 1
    - created_at: 1993-07-26T02:54:17+09:00
      deletedAt: 1999-07-26T02:54:17+09:00
      design_id: simple
      genre: game
      id: 11
      sub_title: diary
      title: user's blog
      updated_at: 1979-11-12T02:46:55+09:00
      user_id: 1
    - created_at: 1993-07-26T02:54:17+09:00
      deletedAt: 1999-07-26T02:54:17+09:00
      design_id: simple
      genre: game
      id: 11
      sub_title: diary
      title: user's blog
      updated_at: 1979-11-12T02:46:55+09:00
      user_id: 1
    items:
      $ref: '#/definitions/UserBlog'
    type: array

  UserBlogEntryPayload:
    example:
      content: Corporis officiis distinctio optio voluptatem.
      theme: diary
      title: 今日の日記
      user_blog_id: 11
    properties:
      content:
        description: 内容
        example: Corporis officiis distinctio optio voluptatem.
        type: string
      theme:
        description: テーマ
        example: diary
        type: string
      title:
        description: タイトル
        example: 今日の日記
        type: string
      user_blog_id:
        description: ユーザーブログID
        example: 11
        format: int64
        type: integer
    title: UserBlogEntryPayload
    required:
    - user_blog_id
    type: object

  UserBlogPayload:
    example:
      design_id: simple
      genre: game
      sub_title: diary
      title: user's blog
      user_id: 1
    properties:
      design_id:
        description: デザインID
        enum:
        - simple
        - tile
        - 2column
        - 3column
        example: simple
        type: string
      genre:
        description: ジャンル
        example: game
        type: string
      sub_title:
        description: サブタイトル
        example: diary
        type: string
      title:
        description: タイトル
        example: user's blog
        type: string
      user_id:
        description: ユーザーID
        example: 1
        format: int64
        type: integer
    required:
    - user_id
    type: object

  UserCollection:
    description: UserCollection is the media type for an array of User
    example:
    - birthday: 1995-05-12T09:45:56Z
      blood_type: A
      createdAt: 2010-04-14T11:16:32+09:00
      deletedAt: 2014-04-27T12:25:11+09:00
      id: 1
      job: 大学生
      name: 山田 太郎
      sex: male
      updatedAt: 1994-04-27T12:25:11+09:00
    items:
      $ref: '#/definitions/User'
    type: array

  UserPayload:
    example:
      birthday: 1995-05-12T09:45:56Z
      blood_type: A
      job: 大学生
      name: 山田 太郎
      sex: male
    properties:
      birthday:
        description: 誕生日
        example: 1995-05-12T09:45:56Z
        format: date-time
        type: string
      blood_type:
        description: 血液型
        enum:
        - A
        - B
        - O
        - AB
        example: A
        type: string
      job:
        description: 職業
        example: 大学生
        type: string
      name:
        description: 名前
        example: 山田 太郎
        type: string
      sex:
        description: 性別
        enum:
        - male
        - female
        example: male
        type: string
    required:
    - name
    type: object

  adminrolepath:
    example:
      allow: true
      path: GET:/user
    properties:
      allow:
        description: allow the path
        example: true
        type: boolean
      path:
        description: path
        enum:
        - AutoGenerate # @see node-vironlib/swagger.js
        example: GET:/user
        type: string
    required:
    - path
    - allow
    type: object

  api:
    description: Accessing api information type
    example:
      method: get
      path: /quickview
    properties:
      method:
        description: Access paths[path][method] of swagger.json
        example: get
        type: string
      path:
        description: Access paths[path] of swagger.json
        example: /quickview
        type: string
    required:
    - path
    - method
    type: object

  component:
    description: A Component type
    example:
      api:
        method: get
        path: /user
      name: ユーザー
      options:
      - key: key
        value: value
      pagination: true
      query:
      - key: key
        type: string
      style: Style of Web Component
      table_labels:
      - Aut et.
      - Aut et.
    properties:
      api:
        $ref: '#/definitions/api'
      name:
        description: Title of page
        example: ユーザー
        type: string
      options:
        description: style options
        example:
        - key: key
          value: value
        items:
          $ref: '#/definitions/option'
        type: array
      pagination:
        description: allow pagination
        example: true
        type: boolean
      query:
        description: query for request
        example:
        - key: key
          type: string
        items:
          $ref: '#/definitions/query'
        type: array
      style:
        default: number
        enum:
        - number
        - list
        - table
        - graph-scatterplot
        - graph-line
        - graph-bar
        - graph-horizontal-bar
        - graph-stacked-bar
        - graph-horizontal-stacked-bar
        - graph-stacked-area
        example: Style of Web Component
        type: string
      table_labels:
        description: keys of table row
        example:
        - name
        items:
          example: name
          type: string
        type: array
    required:
    - api
    - name
    - style
    - pagination
    type: object

  error:
    description: Error response media type
    example:
      code: invalid_value
      detail: Value of ID must be an integer
      id: 3F1FKVRR
      meta:
        timestamp: 1502172152
      status: "400"
    properties:
      code:
        description: an application-specific error code, expressed as a string value.
        example: invalid_value
        type: string
      detail:
        description: a human-readable explanation specific to this occurrence of the
          problem.
        example: Value of ID must be an integer
        type: string
      id:
        description: a unique identifier for this particular occurrence of the problem.
        example: 3F1FKVRR
        type: string
      meta:
        additionalProperties: true
        description: a meta object containing non-standard meta-information about
          the error.
        example:
          timestamp: 1502172152
        type: object
      status:
        description: the HTTP status code applicable to this problem, expressed as
          a string value.
        example: "400"
        type: string
    type: object

  option:
    example:
      key: key
      value: value
    properties:
      key:
        description: Key
        example: key
        type: string
      value:
        description: Value
        example: value
        type: string
    required:
    - key
    - value
    type: object

  page:
    description: A page type
    example:
      components:
      - api:
          method: get
          path: /user
        name: ユーザー
        options:
        - key: key
          value: value
        pagination: true
        query:
        - key: key
          type: string
        style: Style of Web Component
        table_labels:
        - name
      group: Group of page
      id: Repellat iure non.
      name: Maxime consequuntur quia aliquid omnis aut.
      section: Section of page
    properties:
      components:
        description: A components format
        example:
        - api:
            method: get
            path: /user
          name: ユーザー
          options:
          - key: key
            value: value
          pagination: true
          query:
          - key: key
            type: string
          style: Style of Web Component
          table_labels:
          - name
        items:
          $ref: '#/definitions/component'
        type: array
      group:
        enum:
        - ""
        - kpi
        - user
        - blog
        - admin
        example: Group of page
        type: string
      id:
        description: id of page
        example: quickview
        type: string
      name:
        description: Title of page
        example: クイックビュー
        type: string
      section:
        default: manage
        enum:
        - manage
        - dashboard
        example: Section of page
        type: string
    required:
    - id
    - name
    - section
    - group
    - components
    type: object

  query:
    example:
      key: key
      type: string
    properties:
      key:
        description: Key
        example: key
        type: string
      type:
        default: string
        description: Type
        enum:
        - string
        - integer
        - number
        - boolean
        - date
        - datetime
        - time
        example: string
        type: string
    required:
    - key
    - type
    type: object

  ValidatorCollection:
    items:
      $ref: '#/definitions/Validator'
    type: array

  Validator:
    type: object
    properties:
      id:
        description: id of validator
        example: 1
        type: number
      validation_type:
        type: string
      multiple_of:
        description: multipleOfの3倍であること
        example: 9
        type: number
        multipleOf: 3
      maximum:
        description: 10以下であること
        example: 10
        type: number
        maximum: 10
        exclusiveMaximum: false
      exclusive_maximum:
        description: 10未満であること
        example: 9
        type: number
        maximum: 10
        exclusiveMaximum: true
      minimum:
        description: 1以上であること
        example: 1
        type: number
        minimum: 1
        exclusiveMinimum: false
      exclusive_minimum:
        description: 1を超過していること
        example: 2
        type: number
        minimum: 1
        exclusiveMinimum: true
      min_max:
        description: 1以上10未満であること
        example: 5
        type: number
        minimum: 1
        exclusiveMinimum: false
        maximum: 10
        exclusiveMaximum: true
      max_length:
        description: 20文字以下であること
        example: abcdefghijklmnopqrst
        type: string
        maxLength: 20
      min_length:
        description: 5文字以上であること
        example: abcde
        type: string
        minLength: 5
      min_max_length:
        description: 5文字以上20文字以下であること
        example: abcdefghij
        type: string
        minLength: 5
        maxLength: 20
      pattern:
        description: 英小文字であること
        example: abcde
        type: string
        pattern: "[a-z]"
      #additional_items:
      #  type: array
      #  items:
      #    - type: object
      #      properties:
      #        name:
      #          type: string
      #        age:
      #          type: integer
      #  additionalItems: false
      max_items:
        description: 3要素以下であること
        example:
        - value: a
        - value: b
        - value: c
        type: array
        items:
          type: object
          properties:
            value:
              type: string
        maxItems: 3
      min_items:
        description: 2要素以上であること
        example:
        - value: a
        - value: b
        type: array
        items:
          type: object
          properties:
            value:
              type: string
        minItems: 2
      unique_items:
        description: 要素が重複しないこと
        example:
        - value: a
        - value: b
        type: array
        items:
          type: object
          properties:
            value:
              type: string
        uniqueItems: true
      max_properties:
        description: 3要素以下であること
        example:
          key1: aaa
          key2: 2
          key3: true
        type: object
        properties:
          key1:
            type: string
          key2:
            type: number
          key3:
            type: boolean
          key4:
            type: integer
        maxProperties: 3
      min_properties:
        description: 2要素以上であること
        example:
          key1: aaa
          key2: 2
        type: object
        properties:
          key1:
            type: string
          key2:
            type: number
          key3:
            type: boolean
          key4:
            type: integer
        minProperties: 2
      #additional_properties:
      #  description: ???
      #  type: object
      #  properties:
      #    x-key1:
      #      type: string
      #    x-key2:
      #      type: number
      #  patternProperties:
      #    "^x-":
      #      type: string
      #  additionalProperties: false
      #dependencies:
      #  description: ほげ
      #  example:
      #    name: aiueo
      #    credit_card: 1111111111111111
      #    billing_address: address
      #  properties:
      #    name:
      #      type: string
      #    credit_card:
      #      type: number
      #    billing_address:
      #      type: string
      #  required:
      #  - name
      #  dependencies:
      #    credit_card:
      #    - billing_address
      all_of:
        description: 5文字以上10文字以下
        example: aaaaaaaaaa
        type: string
        allOf:
        - type: string
        - maxLength: 10
        - minLength: 5
      #any_of:
      #  description: 5文字以上のStringもしくは3桁以下のNumber
      #  type:
      #    - string
      #    - number
      #  anyOf:
      #  - type: string
      #    minLength: 5
      #  - type: number
      #    maxLength: 3

  NestedArrayCollection:
    items:
      $ref: '#/definitions/NestedArray'
    type: array

  NestedArray:
    type: object
    properties:
      id:
        description: id of nested array
        example: 1
        type: number
      values:
        type: array
        items:
          type: array
          items:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                age:
                  type: number

  FormatCollection:
    items:
      $ref: '#/definitions/Format'
    type: array

  Format:
    type: object
    properties:
      id:
        description: id of format
        example: 1
        type: number
      date_time:
        example: 2006-02-12T07:09:13+09:00
        type: string
        format: date-time
      email:
        example: user@dmc.com
        type: string
        format: email
      hostname:
        example: dmc.com
        type: string
        format: hostname
      ipv4:
        example: 127.0.0.1
        type: string
        format: ipv4
      ipv6:
        example: FEDC:BA98:7654:3210:FEDC:BA98:7654:3210
        type: string
        format: ipv6
      uri:
        example: https://dmc.com/swagger.json
        type: string
        format: uri
      multiline:
        example: |-
          aaaaaaaaaaaaaa
          bbbbbbbbbbbbbb
          cccccccccccccc
        type: string
        format: multiline
      wyswyg:
        example: |-
          <html>
            <body>
              <div>hoge</div>
            </body>
          </html>
        type: string
        format: wyswyg
        x-wyswyg-options:
          key1:
            key2: value
            key3:
              - a
              - b
              - c
      hex:
        example: "#95989A"
        type: string
        format: hex
      rgba:
        example: 171,205,239,1
        type: string
        format: rgba
        x-format: "%d,%d,%d,%d" # クライアントでカラーパレットを文字列に変換する際のフォーマット
      cmyk:
        example: 100,100,100,100
        type: string
        format: cmyk
        x-format: "%d,%d,%d,%d" # クライアントでカラーパレットを文字列に変換する際のフォーマット
      date_fullyear:
        example: 1970
        type: string
        format: date-fullyear
      date_month:
        example: 01
        type: string
        format: date-month
      date_mday:
        example: 31
        type: string
        format: date-mday
      time_hour:
        example: 23
        type: string
        format: time-hour
      time_minute:
        example: 59
        type: string
        format: time-minute
      time_second:
        example: 59
        type: string
        format: time-second
      time_secfrac:
        example: .999
        type: string
        format: time-secfrac
      time_numoffset:
        example: +09:00
        type: string
        format: time-numoffset
      time_offset:
        example: Z
        type: string
        format: time-offset
      partial_time:
        example: "23:59:59.999"
        type: string
        format: partial-time
      full_date:
        example: 1970-12-31
        type: string
        format: full-date
      full_time:
        example: 23:59:59.999Z
        type: string
        format: full-time

#################################################
# paths
# - APIの一覧
#################################################
paths:
  /:
    get:
      x-swagger-router-controller: root
      description: get root
      operationId: root#show
      responses:
        "301":
          description: Moved Permanently
      schemes:
      - https
      summary: show root
      tags:
      - root

  /adminrole:
    get:
      x-swagger-router-controller: dmc_admin_role
      description: ユーザ権限の一覧
      operationId: admin_role#list
      parameters: []
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AdminRoleCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザ権限一覧
      tags:
      - admin_role

    post:
      x-swagger-router-controller: dmc_admin_role
      description: ユーザ権限の作成
      operationId: admin_role#create
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateAdminRolePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AdminRole'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザ権限作成
      tags:
      - admin_role

  /adminrole/{role_id}:
    delete:
      x-swagger-router-controller: dmc_admin_role
      description: ユーザ権限の削除
      operationId: admin_role#remove
      parameters:
      - description: role id
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザ権限削除
      tags:
      - admin_role

    get:
      x-swagger-router-controller: dmc_admin_role
      description: ユーザ権限の取得
      operationId: admin_role#show
      parameters:
      - description: role id
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AdminRole'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザ権限取得
      tags:
      - admin_role

    put:
      x-swagger-router-controller: dmc_admin_role
      description: ユーザ権限の更新
      operationId: admin_role#update
      parameters:
      - description: role id
        in: path
        name: role_id
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateAdminRolePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AdminRole'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザ権限更新
      tags:
      - admin_role

  /adminuser:
    get:
      x-swagger-router-controller: dmc_admin_user
      description: 管理ユーザの一覧
      operationId: admin_user#list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AdminUserCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: 管理ユーザ一覧
      tags:
      - admin_user

    post:
      x-swagger-router-controller: dmc_admin_user
      description: 管理ユーザの作成
      operationId: admin_user#create
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateAdminUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AdminUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: 管理ユーザ作成
      tags:
      - admin_user

  /adminuser/{id}:
    delete:
      x-swagger-router-controller: dmc_admin_user
      description: 管理ユーザの削除
      operationId: admin_user#remove
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: 管理ユーザ削除
      tags:
      - admin_user

    get:
      x-swagger-router-controller: dmc_admin_user
      description: 管理ユーザ情報の取得
      operationId: admin_user#show
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AdminUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: 管理ユーザ取得
      tags:
      - admin_user

    put:
      x-swagger-router-controller: dmc_admin_user
      description: 管理ユーザ情報の更新
      operationId: admin_user#update
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateAdminUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AdminUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: 管理ユーザ更新
      tags:
      - admin_user

  /auditlog:
    get:
      x-swagger-router-controller: dmc_audit_log
      description: 監査ログの一覧
      operationId: audit_log#list
      parameters:
      - description: number of items per page
        in: query
        name: limit
        required: false
        type: integer
      - description: offset number of page
        in: query
        name: offset
        required: false
        type: integer
      - description: http request method
        in: query
        name: request_method
        required: false
        type: string
      - description: user id
        in: query
        name: user_id
        required: false
        type: string
      - description: request uri
        in: query
        name: request_uri
        required: false
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AuditLogCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: 監査ログ一覧
      tags:
      - audit_log

  /blogdesign:
    get:
      x-swagger-router-controller: blog_design
      description: ブログデザインの一覧
      operationId: blog_design#list
      parameters:
      - description: number of items per page
        in: query
        name: limit
        required: false
        type: integer
      - description: offset number of page
        in: query
        name: offset
        required: false
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/BlogDesignCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ブログデザイン一覧
      tags:
      - blog_design

    post:
      x-swagger-router-controller: blog_design
      description: ブログデザインの作成
      operationId: blog_design#create
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/BlogDesignPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/BlogDesign'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ブログデザイン作成
      tags:
      - blog_design

  /blogdesign/{id}:
    delete:
      x-swagger-router-controller: blog_design
      description: ブログデザインの削除
      operationId: blog_design#remove
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ブログデザイン削除
      tags:
      - blog_design

    get:
      x-swagger-router-controller: blog_design
      description: ブログデザイン情報の取得
      operationId: blog_design#show
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/BlogDesign'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ブログデザイン取得
      tags:
      - blog_design

    put:
      x-swagger-router-controller: blog_design
      description: ブログデザイン情報の更新
      operationId: blog_design#update
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/BlogDesignPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/BlogDesign'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ブログデザイン更新
      tags:
      - blog_design

  /dmc:
    get:
      x-swagger-router-controller: dmc
      description: dmc settings
      operationId: dmc#show
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Dmc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: show dmc
      tags:
      - dmc

  /dmc_authtype:
    get:
      x-swagger-router-controller: dmc_authtype
      description: get auth types
      operationId: auth_type#list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AuthTypeCollection'
      schemes:
      - https
      summary: list auth_type
      tags:
      - auth_type

  /googleoauth2callback:
    get:
      x-swagger-router-controller: dmc_auth
      description: callback function from google oauth2
      operationId: dmc_auth#googleoauth2callback
      parameters:
      - description: authorization code
        in: query
        name: code
        required: false
        type: string
      - description: check state for CSRF
        in: query
        name: state
        required: false
        type: string
      responses:
        "301":
          description: Moved Permanently
          headers:
            Authorization:
              description: Generated JWT
              type: string
            Content-Type:
              description: content type
              type: string
            Location:
              description: redirect url
              type: string
        "307":
          description: Temporary Redirect
      schemes:
      - https
      summary: googleoauth2callback auth
      tags:
      - auth

  /googlesignin:
    get:
      x-swagger-router-controller: dmc_auth
      description: signin with google
      operationId: dmc_auth#googlesignin
      parameters:
      - description: redirect url
        in: query
        name: redirect_url
        required: false
        type: string
      responses:
        "301":
          description: Moved Permanently
          headers:
            Content-Type:
              description: content type
              type: string
            Location:
              description: redirect url
              type: string
      schemes:
      - https
      summary: googlesignin auth
      tags:
      - auth

  /ping:
    get:
      x-swagger-router-controller: ping
      description: check alive
      operationId: ping#show
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      schemes:
      - https
      summary: show ping
      tags:
      - ping

  /signin:
    post:
      x-swagger-router-controller: dmc_auth
      description: サインイン
      operationId: dmc_auth#signin
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/SigninAuthPayload'
      responses:
        "204":
          description: No Content
          headers:
            Authorization:
              description: Generated JWT
              type: string
        "307":
          description: Temporary Redirect
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      summary: サインイン
      tags:
      - auth

  /signout:
    post:
      x-swagger-router-controller: dmc_auth
      description: サインアウト
      operationId: dmc_auth#signout
      responses:
        "204":
          description: No Content
      schemes:
      - https
      summary: サインアウト
      tags:
      - auth

  /stats/dau:
    get:
      x-swagger-router-controller: stats
      description: Service Daily Activity User
      operationId: stats#dau
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Statsdau'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      summary: show stats_dau
      tags:
      - stats_dau

  /stats/mau:
    get:
      x-swagger-router-controller: stats
      description: Service Monthly Activity User
      operationId: stats#mau
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Statsmau'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      summary: show stats_mau
      tags:
      - stats_mau

  /stats/planet/bar:
    get:
      x-swagger-router-controller: stats_planet
      description: Planets Information
      operationId: stats_planet#bar
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Statsplanet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      summary: bar stats_planet
      tags:
      - stats_planet

  /stats/planet/horizontal-bar:
    get:
      x-swagger-router-controller: stats_planet
      description: Planets Information
      operationId: stats_planet#horizontal_bar
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Statsplanet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      summary: horizontal-bar stats_planet
      tags:
      - stats_planet

  /stats/planet/horizontal-stacked-bar:
    get:
      x-swagger-router-controller: stats_planet
      description: Planets Information
      operationId: stats_planet#horizontal_stacked_bar
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Statsplanet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      summary: horizontal-stacked-bar stats_planet
      tags:
      - stats_planet

  /stats/planet/line:
    get:
      x-swagger-router-controller: stats_planet
      description: Planets Information
      operationId: stats_planet#line
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Statsplanet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      summary: line stats_planet
      tags:
      - stats_planet

  /stats/planet/scatterplot:
    get:
      x-swagger-router-controller: stats_planet
      description: Planets Information
      operationId: stats_planet#scatterplot
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Statsplanet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      summary: scatterplot stats_planet
      tags:
      - stats_planet

  /stats/planet/stacked-area:
    get:
      x-swagger-router-controller: stats_planet
      description: Planets Information
      operationId: stats_planet#stacked_area
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Statsplanet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      summary: stacked-area stats_planet
      tags:
      - stats_planet

  /stats/planet/stacked-bar:
    get:
      x-swagger-router-controller: stats_planet
      description: Planets Information
      operationId: stats_planet#stacked-bar
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Statsplanet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      summary: stacked-bar stats_planet
      tags:
      - stats_planet

  /swagger.json:
    get:
      x-swagger-router-controller: swagger
      description: swagger.jsonの取得
      operationId: swagger#show
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: swagger.json取得
      tags:
      - swagger

  /user:
    get:
      x-swagger-router-controller: user
      description: ユーザの一覧
      operationId: user#list
      parameters:
      - description: 名前
        in: query
        name: name
        required: false
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザ一覧
      tags:
      - user

    post:
      x-swagger-router-controller: user
      description: ユーザの作成
      operationId: user#create
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザ作成
      tags:
      - user

  /user/download/csv:
    get:
      x-swagger-router-controller: user
      description: ユーザ一覧をcsvファイルでダウンロード
      operationId: user#download
      produces:
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザ一覧ダウンロード
      tags:
      - user

  /user/upload/csv:
    post:
      x-swagger-router-controller: user
      description: ユーザをcsvファイルでアップロード
      operationId: user#upload
      parameters:
      - in: formData
        name: payload
        required: true
        type: file
      consumes:
      - "multipart/form-data"
        #- "application/x-www-form-urlencoded"
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザアップロード
      tags:
      - user

  /user/{id}:
    delete:
      x-swagger-router-controller: user
      description: ユーザの削除
      operationId: user#remove
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザ削除
      tags:
      - user

    get:
      x-swagger-router-controller: user
      description: ユーザ情報の取得
      operationId: user#show
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザ取得
      tags:
      - user

    put:
      x-swagger-router-controller: user
      description: ユーザ情報の更新
      operationId: user#update
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザ更新
      tags:
      - user

  /userblog:
    get:
      x-swagger-router-controller: user_blog
      description: ユーザブログの一覧
      operationId: user_blog#list
      parameters:
      - description: number of items per page
        in: query
        name: limit
        required: false
        type: integer
      - description: offset number of page
        in: query
        name: offset
        required: false
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserBlogCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザブログ一覧
      tags:
      - user_blog

    post:
      x-swagger-router-controller: user_blog
      description: ユーザブログの作成
      operationId: user_blog#create
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserBlogPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserBlog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザブログ作成
      tags:
      - user_blog

  /userblog/{id}:
    delete:
      x-swagger-router-controller: user_blog
      description: ユーザブログの削除
      operationId: user_blog#remove
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザブログ削除
      tags:
      - user_blog

    get:
      x-swagger-router-controller: user_blog
      description: ユーザブログ情報の取得
      operationId: user_blog#show
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserBlog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザブログ取得
      tags:
      - user_blog

    put:
      x-swagger-router-controller: user_blog
      description: ユーザブログ情報の更新
      operationId: user_blog#update
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserBlogPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserBlog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザブログ更新
      tags:
      - user_blog

  /userblog/autocomplete/{field}:
    get:
      description: autocomplete user data
      operationId: user_blog#autocomplete
      parameters:
      - description: field name in userblog model
        in: path
        name: field
        required: true
        type: string
      - description: search query string
        in: query
        name: search
        required: false
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: autocomplete user_blog
      tags:
      - user_blog

  /userblogentry:
    get:
      x-swagger-router-controller: user_blog_entry
      description: ユーザブログ記事の一覧
      operationId: user_blog_entry#list
      parameters:
      - description: number of items per page
        in: query
        name: limit
        required: false
        type: integer
      - description: offset number of page
        in: query
        name: offset
        required: false
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserBlogEntryCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザブログ記事一覧
      tags:
      - user_blog_entry

    post:
      x-swagger-router-controller: user_blog_entry
      description: ユーザブログ記事の作成
      operationId: user_blog_entry#create
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserBlogEntryPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserBlogEntry'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザブログ記事作成
      tags:
      - user_blog_entry

  /userblogentry/{id}:
    delete:
      x-swagger-router-controller: user_blog_entry
      description: ユーザブログ記事の削除
      operationId: user_blog_entry#remove
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザブログ記事削除
      tags:
      - user_blog_entry

    get:
      x-swagger-router-controller: user_blog_entry
      description: ユーザブログ記事情報の取得
      operationId: user_blog_entry#show
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserBlogEntry'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザブログ記事取得
      tags:
      - user_blog_entry

    put:
      x-swagger-router-controller: user_blog_entry
      description: ユーザブログ記事情報の更新
      operationId: user_blog_entry#update
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserBlogEntryPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserBlogEntry'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ユーザブログ記事更新
      tags:
      - user_blog_entry

  /validator:
    get:
      x-swagger-router-controller: validator
      description: バリデータの一覧
      operationId: validator#list
      parameters:
      - description: number of items per page
        in: query
        name: limit
        required: false
        type: integer
      - description: offset number of page
        in: query
        name: offset
        required: false
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ValidatorCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: バリデータ
      tags:
      - validator

    post:
      x-swagger-router-controller: validator
      description: バリデータの作成
      operationId: validator#create
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/Validator'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Validator'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: バリデータ作成
      tags:
      - validator

  /validator/{id}:
    put:
      x-swagger-router-controller: validator
      description: バリデータ情報の更新
      operationId: validator#update
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/Validator'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Validator'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: バリデータ更新
      tags:
      - validator

  /nestedarray:
    get:
      x-swagger-router-controller: nested_array
      description: ネスト配列の一覧
      operationId: nested_array#list
      parameters:
      - description: number of items per page
        in: query
        name: limit
        required: false
        type: integer
      - description: offset number of page
        in: query
        name: offset
        required: false
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/NestedArrayCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ネスト配列一覧
      tags:
      - nested_array

    post:
      x-swagger-router-controller: nested_array
      description: ネスト配列の作成
      operationId: nested_array#create
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/NestedArray'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/NestedArray'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ネスト配列作成
      tags:
      - nested_array

  /nestedarray/{id}:
    put:
      x-swagger-router-controller: nested_array
      description: ネスト配列情報の更新
      operationId: nested_array#update
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/NestedArray'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/NestedArray'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: ネスト配列更新
      tags:
      - netsted_array

  /format:
    get:
      x-swagger-router-controller: format
      description: フォーマットの一覧
      operationId: format#list
      parameters:
      - description: number of items per page
        in: query
        name: limit
        required: false
        type: integer
      - description: offset number of page
        in: query
        name: offset
        required: false
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/FormatCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: フォーマット一覧
      tags:
      - format

    post:
      x-swagger-router-controller: format
      description: フォーマットの作成
      operationId: format#create
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/Format'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Format'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: フォーマット作成
      tags:
      - format

  /format/{id}:
    put:
      x-swagger-router-controller: format
      description: フォーマット情報の更新
      operationId: format#update
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/Format'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Format'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: フォーマット更新
      tags:
      - format

#################################################
# securityDefinitions
# - API全体で利用できる認証スキーム
#################################################
securityDefinitions:
  jwt:
    type: oauth2
    authorizationUrl: /signin
    flow: implicit
    scopes:
      api:access: API access

#################################################
# produces
# - APIが提供するMIMEタイプの一覧
#################################################
produces:
  - application/json
  - text/plain

#################################################
# consumes
# - APIが受け付けるMIMEタイプの一覧
#################################################
consumes:
  - application/json
  - text/plain
