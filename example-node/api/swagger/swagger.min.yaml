#################################################
# OpenAPI Specification Version2.0.0
# @see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md
#################################################
swagger: "2.0"

#################################################
# host
# - APIを提供するホスト
#################################################
host: localhost:3000

#################################################
# info
# - API全般のメタ情報を記載
#################################################
info:
  title: DMC example for Node.js
  description: Design-based Management Console.
  version: 0.0.1

#################################################
# schemes
# - APIを提供する通信プロトコルのリスト
#################################################
schemes:
- https

#################################################
# definitions
# - リクエストやレスポンスのレイアウトの定義
# - paths内から $ref で参照できる
#################################################
definitions:
  AdminRole:
    description: A Admin Role
    example:
      paths:
      - allow: true
        path: GET:/user
      role_id: operator
    properties:
      paths:
        description: target path
        example:
        - allow: true
          path: GET:/user
        items:
          $ref: '#/definitions/adminrolepath'
        type: array
      role_id:
        description: role id
        example: operator
        type: string
    required:
    - role_id
    - paths
    type: object

  AdminRoleCollection:
    description: AdminRoleCollection is the media type for an array of AdminRole
    example:
    - paths:
      - allow: true
        path: GET:/user
      role_id: operator
    items:
      $ref: '#/definitions/AdminRole'
    type: array

  AdminUser:
    description: A Admin User
    example:
      email: test@dmc.com
      id: 1
      role_id: operator
    properties:
      email:
        description: login id
        example: test@dmc.com
        type: string
      id:
        description: unique id
        example: 1
        format: int64
        type: integer
      role_id:
        description: role id
        example: operator
        type: string
    required:
    - id
    - email
    type: object

  AdminUserCollection:
    description: AdminUserCollection is the media type for an array of AdminUser
    example:
    - email: test@dmc.com
      id: 1
      role_id: operator
    items:
      $ref: '#/definitions/AdminUser'
    type: array

  AuditLog:
    description: A Audit Log
    example:
      createdAt: 2006-02-12T07:09:13+09:00
      request_body: '{"name":"test", "id":1}'
      request_method: GET
      request_uri: '/user'
      source_ip: 200.200.200.200
      status_code: 200
      user_id: test@dmc.com
    properties:
      createdAt:
        description: created time
        example: 2006-02-12T07:09:13+09:00
        format: date-time
        type: string
      request_body:
        description: request body
        example: '{"name":"test", "id":1}'
        type: string
      request_method:
        description: http request method
        example: GET
        type: string
      request_uri:
        description: request uri
        example: /user
        type: string
      source_ip:
        description: source ip address
        example: 200.200.200.200
        type: string
      status_code:
        description: http status code
        example: 200
        type: integer
      user_id:
        description: user id
        example: Et saepe nihil in earum sint.
        type: string
    type: object

  AuditLogCollection:
    description: AuditLogCollection is the media type for an array of AuditLog
    example:
    - createdAt: 2006-02-12T07:09:13+09:00
      request_body: '{"name":"test", "id":1}'
      request_method: GET
      request_uri: '/user'
      source_ip: 200.200.200.200
      status_code: 200
      user_id: test@dmc.com
    items:
      $ref: '#/definitions/AuditLog'
    type: array

  AuthType:
    description: A Auth Type
    example:
      method: POST
      provider: google
      type: oauth
      url: '/googlesignin'
    properties:
      method:
        description: request method
        example: POST
        type: string
      provider:
        description: auth provider
        example: google
        type: string
      type:
        description: auth type
        example: oauth
        type: string
      url:
        description: request url
        example: '/googlesignin'
        type: string
    required:
    - type
    - url
    - method
    - provider
    type: object

  AuthTypeCollection:
    description: AuthTypeCollection is the media type for an array of AuthType
    example:
    - method: POST
      provider: google
      type: oauth
      url: '/googlesignin'
    items:
      $ref: '#/definitions/AuthType'
    type: array

  BlogDesign:
    description: A BlogDesign Master
    example:
      background_image: http://hoge.com/a.png
      base_color: blue
      createdAt: 1990-04-23T00:18:19+09:00
      deletedAt: 1999-04-23T00:18:19+09:00
      id: des_001
      name: design name
      updatedAt: 1971-03-24T08:40:07+09:00
    properties:
      background_image:
        description: 背景画像
        example: http://hoge.com/a.png
        type: string
      base_color:
        description: ベースカラー
        example: blue
        type: string
      createdAt:
        description: 作成日時
        example: 1990-04-23T00:18:19+09:00
        format: date-time
        type: string
      deletedAt:
        description: 削除日時
        example: 1999-04-23T00:18:19+09:00
        format: date-time
        type: string
      id:
        description: デザインID
        example: des_001
        type: string
      name:
        description: 名前
        example: design name
        type: string
      updatedAt:
        description: 更新日時
        example: 1971-03-24T08:40:07+09:00
        format: date-time
        type: string
    required:
    - name
    type: object

  CreateAdminRolePayload:
    example:
      paths:
      - allow: true
        path: GET:/user
      - allow: true
        path: GET:/user
      role_id: operator
    properties:
      paths:
        description: target path
        example:
        - allow: true
          path: GET:/user
        - allow: true
          path: GET:/user
        items:
          $ref: '#/definitions/adminrolepath'
        type: array
      role_id:
        description: role id
        example: operator
        type: string
    type: object

  CreateAdminUserPayload:
    example:
      email: user@sample.com
      password: XXXXXXXXXXXXXXXX
    properties:
      email:
        description: login user mail address
        example: user@sample.com
        type: string
      password:
        description: password for email auth
        example: XXXXXXXXXXXXXXXX
        type: string
    required:
    - email
    - password
    type: object

  Dmc:
    description: A DMC settings data
    example:
      color: white
      name: DMC Example Project for Node.js
      pages:
      - components:
        - api:
            method: get
            path: /stats/dau
          name: DAU
          options:
          - key: key
            value: value
          pagination: true
          query:
          - key: key
            type: string
          style: number
          table_labels:
          - name
        group: empty
        id: quickview
        name: クイックビュー
        section: dashboard
      tags:
      - dmc
      - example
      thumbnail: Iure nisi.
    properties:
      color:
        default: white
        enum:
        - white
        - black
        - perple
        example: white
        type: string
      name:
        description: Name pattern
        example: DMC Example Project for Node.js
        type: string
      pages:
        description: A Pages format
        example:
        - components:
          - api:
              method: get
              path: /stats/dau
            name: DAU
            options:
            - key: key
              value: value
            pagination: true
            query:
            - key: key
              type: string
            style: number
            table_labels:
            - name
          group: empty
          id: quickview
          name: クイックビュー
          section: dashboard
        items:
          $ref: '#/definitions/page'
        type: array
      tags:
        description: tags
        example:
        - dmc
        items:
          example: dmc
          type: string
        type: array
      thumbnail:
        description: thumbnail of endpoint
        example: https://dmc.com/thumbnail.png
        type: string
    required:
    - name
    - color
    - thumbnail
    - tags
    - pages
    type: object

  SigninAuthPayload:
    example:
      email: user1@dmc.com
      password: XXXXXXXXXXXX
    properties:
      email:
        example: user1@dmc.com
        type: string
      password:
        example: XXXXXXXXXXXX
        type: string
    type: object

  UpdateAdminRolePayload:
    example:
      paths:
      - allow: true
        path: GET:/user
    properties:
      paths:
        description: target path
        example:
        - allow: true
          path: GET:/user
        items:
          $ref: '#/definitions/adminrolepath'
        type: array
    type: object

  UpdateAdminUserPayload:
    example:
      password: XXXXXXXXXXXXXXXX
      role_id: viewer
    properties:
      password:
        description: password for email auth
        example: XXXXXXXXXXXXXXXX
        type: string
      role_id:
        description: admin role id
        example: viewer
        type: string
    required:
    - role_id
    type: object

  adminrolepath:
    example:
      allow: true
      path: GET:/user
    properties:
      allow:
        description: allow the path
        example: true
        type: boolean
      path:
        description: path
        enum:
        - AutoGenerate # @see node-vironlib/swagger.js
        example: GET:/user
        type: string
    required:
    - path
    - allow
    type: object

  api:
    description: Accessing api information type
    example:
      method: get
      path: /quickview
    properties:
      method:
        description: Access paths[path][method] of swagger.json
        example: get
        type: string
      path:
        description: Access paths[path] of swagger.json
        example: /quickview
        type: string
    required:
    - path
    - method
    type: object

  component:
    description: A Component type
    example:
      api:
        method: get
        path: /user
      name: ユーザー
      options:
      - key: key
        value: value
      pagination: true
      query:
      - key: key
        type: string
      style: Style of Web Component
      table_labels:
      - Aut et.
      - Aut et.
    properties:
      api:
        $ref: '#/definitions/api'
      name:
        description: Title of page
        example: ユーザー
        type: string
      options:
        description: style options
        example:
        - key: key
          value: value
        items:
          $ref: '#/definitions/option'
        type: array
      pagination:
        description: allow pagination
        example: true
        type: boolean
      query:
        description: query for request
        example:
        - key: key
          type: string
        items:
          $ref: '#/definitions/query'
        type: array
      style:
        default: number
        enum:
        - number
        - list
        - table
        - graph-scatterplot
        - graph-line
        - graph-bar
        - graph-horizontal-bar
        - graph-stacked-bar
        - graph-horizontal-stacked-bar
        - graph-stacked-area
        example: Style of Web Component
        type: string
      table_labels:
        description: keys of table row
        example:
        - name
        items:
          example: name
          type: string
        type: array
    required:
    - api
    - name
    - style
    - pagination
    type: object

  error:
    description: Error response media type
    example:
      code: invalid_value
      detail: Value of ID must be an integer
      id: 3F1FKVRR
      meta:
        timestamp: 1502172152
      status: "400"
    properties:
      code:
        description: an application-specific error code, expressed as a string value.
        example: invalid_value
        type: string
      detail:
        description: a human-readable explanation specific to this occurrence of the
          problem.
        example: Value of ID must be an integer
        type: string
      id:
        description: a unique identifier for this particular occurrence of the problem.
        example: 3F1FKVRR
        type: string
      meta:
        additionalProperties: true
        description: a meta object containing non-standard meta-information about
          the error.
        example:
          timestamp: 1502172152
        type: object
      status:
        description: the HTTP status code applicable to this problem, expressed as
          a string value.
        example: "400"
        type: string
    type: object

  option:
    example:
      key: key
      value: value
    properties:
      key:
        description: Key
        example: key
        type: string
      value:
        description: Value
        example: value
        type: string
    required:
    - key
    - value
    type: object

  page:
    description: A page type
    example:
      components:
      - api:
          method: get
          path: /user
        name: ユーザー
        options:
        - key: key
          value: value
        pagination: true
        query:
        - key: key
          type: string
        style: Style of Web Component
        table_labels:
        - name
      group: Group of page
      id: Repellat iure non.
      name: Maxime consequuntur quia aliquid omnis aut.
      section: Section of page
    properties:
      components:
        description: A components format
        example:
        - api:
            method: get
            path: /user
          name: ユーザー
          options:
          - key: key
            value: value
          pagination: true
          query:
          - key: key
            type: string
          style: Style of Web Component
          table_labels:
          - name
        items:
          $ref: '#/definitions/component'
        type: array
      group:
        enum:
        - ""
        - kpi
        - user
        - blog
        - admin
        example: Group of page
        type: string
      id:
        description: id of page
        example: quickview
        type: string
      name:
        description: Title of page
        example: クイックビュー
        type: string
      section:
        default: manage
        enum:
        - manage
        - dashboard
        example: Section of page
        type: string
    required:
    - id
    - name
    - section
    - group
    - components
    type: object

  query:
    example:
      key: key
      type: string
    properties:
      key:
        description: Key
        example: key
        type: string
      type:
        default: string
        description: Type
        enum:
        - string
        - integer
        - number
        - boolean
        - date
        - datetime
        - time
        example: string
        type: string
    required:
    - key
    - type
    type: object

#################################################
# paths
# - APIの一覧
#################################################
paths:
  /:
    get:
      x-swagger-router-controller: root
      description: get root
      operationId: root#show
      responses:
        "301":
          description: Moved Permanently
      schemes:
      - https
      summary: show root
      tags:
      - root

  /adminrole:
    get:
      x-swagger-router-controller: dmc_admin_role
      description: get admin roles
      operationId: admin_role#list
      parameters: []
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AdminRoleCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list admin_role
      tags:
      - admin_role

    post:
      x-swagger-router-controller: dmc_admin_role
      description: create a admin role
      operationId: admin_role#create
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateAdminRolePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AdminRole'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: create admin_role
      tags:
      - admin_role

  /adminrole/{role_id}:
    delete:
      x-swagger-router-controller: dmc_admin_role
      description: delete the user
      operationId: admin_role#remove
      parameters:
      - description: role id
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: delete admin_role
      tags:
      - admin_role

    get:
      x-swagger-router-controller: dmc_admin_role
      description: get the admin role
      operationId: admin_role#show
      parameters:
      - description: role id
        in: path
        name: role_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AdminRole'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: show admin_role
      tags:
      - admin_role

    put:
      x-swagger-router-controller: dmc_admin_role
      description: update the admin user
      operationId: admin_role#update
      parameters:
      - description: role id
        in: path
        name: role_id
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateAdminRolePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AdminRole'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update admin_role
      tags:
      - admin_role

  /adminuser:
    get:
      x-swagger-router-controller: dmc_admin_user
      description: get admin users
      operationId: admin_user#list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AdminUserCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list admin_user
      tags:
      - admin_user

    post:
      x-swagger-router-controller: dmc_admin_user
      description: create a admin user
      operationId: admin_user#create
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateAdminUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AdminUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: create admin_user
      tags:
      - admin_user

  /adminuser/{id}:
    delete:
      x-swagger-router-controller: dmc_admin_user
      description: delete the user
      operationId: admin_user#remove
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: delete admin_user
      tags:
      - admin_user

    get:
      x-swagger-router-controller: dmc_admin_user
      description: get the admin user
      operationId: admin_user#show
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AdminUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: show admin_user
      tags:
      - admin_user

    put:
      x-swagger-router-controller: dmc_admin_user
      description: update the admin user
      operationId: admin_user#update
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateAdminUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AdminUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: update admin_user
      tags:
      - admin_user

  /auditlog:
    get:
      x-swagger-router-controller: dmc_audit_log
      description: get admin roles
      operationId: audit_log#list
      parameters:
      - description: number of items per page
        in: query
        name: limit
        required: false
        type: integer
      - description: offset number of page
        in: query
        name: offset
        required: false
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AuditLogCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: list audit_log
      tags:
      - audit_log

  /dmc:
    get:
      x-swagger-router-controller: dmc
      description: dmc settings
      operationId: dmc#show
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Dmc'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: show dmc
      tags:
      - dmc

  /dmc_authtype:
    get:
      x-swagger-router-controller: dmc_authtype
      description: get auth types
      operationId: auth_type#list
      produces:
      - application/vnd.auth_type+json; type=collection
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AuthTypeCollection'
      schemes:
      - https
      summary: list auth_type
      tags:
      - auth_type

  /googleoauth2callback:
    get:
      x-swagger-router-controller: dmc_auth
      description: callback function from google oauth2
      operationId: dmc_auth#googleoauth2callback
      parameters:
      - description: authorization code
        in: query
        name: code
        required: false
        type: string
      - description: check state for CSRF
        in: query
        name: state
        required: false
        type: string
      responses:
        "301":
          description: Moved Permanently
          headers:
            Authorization:
              description: Generated JWT
              type: string
            Content-Type:
              description: content type
              type: string
            Location:
              description: redirect url
              type: string
        "307":
          description: Temporary Redirect
      schemes:
      - https
      summary: googleoauth2callback auth
      tags:
      - auth

  /googlesignin:
    get:
      x-swagger-router-controller: dmc_auth
      description: signin with google
      operationId: dmc_auth#googlesignin
      parameters:
      - description: redirect url
        in: query
        name: redirect_url
        required: false
        type: string
      responses:
        "301":
          description: Moved Permanently
          headers:
            Content-Type:
              description: content type
              type: string
            Location:
              description: redirect url
              type: string
      schemes:
      - https
      summary: googlesignin auth
      tags:
      - auth

  /ping:
    get:
      x-swagger-router-controller: ping
      description: check alive
      operationId: ping#show
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      schemes:
      - https
      summary: show ping
      tags:
      - ping

  /signin:
    post:
      x-swagger-router-controller: dmc_auth
      description: signin with JWT
      operationId: dmc_auth#signin
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/SigninAuthPayload'
      responses:
        "204":
          description: No Content
          headers:
            Authorization:
              description: Generated JWT
              type: string
        "307":
          description: Temporary Redirect
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      summary: signin auth
      tags:
      - auth

  /signout:
    post:
      x-swagger-router-controller: dmc_auth
      description: signout
      operationId: dmc_auth#signout
      responses:
        "204":
          description: No Content
      schemes:
      - https
      summary: signout auth
      tags:
      - auth

  /swagger.json:
    get:
      x-swagger-router-controller: swagger
      description: get swagger.json
      operationId: swagger#show
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error'
      schemes:
      - https
      security:
      - jwt:
        - api:access
      summary: show swagger
      tags:
      - swagger

#################################################
# securityDefinitions
# - API全体で利用できる認証スキーム
#################################################
securityDefinitions:
  jwt:
    type: oauth2
    authorizationUrl: /signin
    flow: implicit
    scopes:
      api:access: API access

#################################################
# produces
# - APIが提供するMIMEタイプの一覧
#################################################
produces:
  - application/json
  - text/plain

#################################################
# consumes
# - APIが受け付けるMIMEタイプの一覧
#################################################
consumes:
  - application/json
  - text/plain
